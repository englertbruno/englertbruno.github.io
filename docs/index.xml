<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>englert.ai</title>
<link>https://www.englert.ai/</link>
<atom:link href="https://www.englert.ai/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.6.42</generator>
<lastBuildDate>Tue, 08 Jul 2025 22:00:00 GMT</lastBuildDate>
<item>
  <title>Why Do Vision Transformers Need So Much Data and How to (Partially) Fix It?</title>
  <dc:creator>Bruno Englert</dc:creator>
  <link>https://www.englert.ai/posts/004_vit_attention_mask/englert_ai_4_vit_attention_mask.html</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p><img style="float: left; padding-right: 10px; padding-top: 10px; padding-bottom: 10px; padding-left: 10px;" width="40%" src="https://www.englert.ai/posts/004_vit_attention_mask/vit_illustration.png"></p>
<p>There’s a persistent belief in the machine learning community that Vision Transformers (ViTs) require massive datasets to perform well. Statements like “ViTs need millions of images” or “they don’t work without ImageNet-21k” are commonly accepted truths. But rarely do we pause to ask <strong>why are ViTs so data-hungry?</strong></p>
<p>In this post, we argue that the answer lies in the very core of what makes ViTs different: the attention mechanism. We’ll explore why attention creates problems early in training, how it leads to noisy gradients and unstable representations — and describe one way to address the instability. This method does not fix all the challenges; notably, it does not solve the issue of learning attention patterns that generalize well from limited data. But it does reduce training instability, especially when batch sizes are small.</p>
</section>
<section id="understanding-the-problem" class="level1">
<h1>Understanding the Problem</h1>
<section id="vits-and-global-attention" class="level2">
<h2 class="anchored" data-anchor-id="vits-and-global-attention">ViTs and Global Attention</h2>
<p>Transformers were originally designed for text, where each token (word or subword) attending to every other token makes sense — language is naturally long-range and sequential. But in images, the locality of information matters. Neighboring pixels and patches are far more likely to be related than distant ones.</p>
<p>ViTs ignore this. Every patch attends to every other patch from the very start of training. That means if attention weights are random (which they are at initialization), the representation at each patch is a jumbled mix of the entire image. Early layers smear information across the whole input.</p>
</section>
<section id="gradient-noise-and-instability" class="level2">
<h2 class="anchored" data-anchor-id="gradient-noise-and-instability">Gradient Noise and Instability</h2>
<p>Since each image in a batch has a different attention pattern, the resulting gradients are highly inconsistent — even within a single batch. This leads to high gradient noise and thus poor learning.</p>
<p><strong>Two key problems arise from this:</strong></p>
<ol type="1">
<li><strong>Information mixing:</strong> Early attention layers destroy spatial locality. At the very end of the model’s output layer, a patch’s embedding contains little meaningful information about the patch itself.</li>
<li><strong>High gradient noise:</strong> Because attention is input-dependent, every image induces a unique mixing pattern, causing gradients to fluctuate wildly across the batch.</li>
</ol>
<p>Together, these effects make training ViTs difficult when the batch size is small.</p>
</section>
<section id="why-cnns-dont-suffer-from-this" class="level2">
<h2 class="anchored" data-anchor-id="why-cnns-dont-suffer-from-this">Why CNNs Don’t Suffer from This</h2>
<p>CNNs by design have inductive bias for locality and translation invariance. Filters are shared across space, and only small neighborhoods are considered at each layer. This makes them stable and thus doesn’t require a larger batch size to lower the gradient noise. ViTs, on the other hand, start with no spatial bias. They must <em>learn</em> to be local and how to use attention.</p>
</section>
</section>
<section id="methodology" class="level1">
<h1>Methodology</h1>
<section id="what-is-soft-spatial-attention-bias-annealing" class="level2">
<h2 class="anchored" data-anchor-id="what-is-soft-spatial-attention-bias-annealing">What Is Soft Spatial Attention Bias Annealing?</h2>
<p>One way to improve early ViT training when using a small batch size, is by adding a <strong>soft spatial attention bias</strong> that makes early attention focus on nearby patches.</p>
<p>This bias is computed using pairwise Euclidean distances between patch positions. The further away two patches are, the less they attend to each other — controlled by a temperature parameter that is slowly increased during training. Low temperature means attention is almost identity-like (each patch attends to itself); high temperature restores full global attention.</p>
<p>This temperature change during the training can be interpreted as a form of <strong>attention annealing</strong> — gradually releasing the spatial constraint as the model becomes more stable.</p>
<div id="fig-soft_spatial_attention_bias_annealing_progression" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-soft_spatial_attention_bias_annealing_progression-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<video width="99%" src="attention_bias_progression.mp4" type="video/mp4" controls="">
</video>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-soft_spatial_attention_bias_annealing_progression-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: <strong>Visualization of soft spatial attention bias annealing.</strong> Each grid cell represent the attention bias for one patch token. Initially, attention is turned off. As training progresses, it is strongly localized to neighboring patches. Eventually, as the bias temperature increases, it gradually restores the vanilla global attention.
</figcaption>
</figure>
</div>
</section>
<section id="code-snippet" class="level2">
<h2 class="anchored" data-anchor-id="code-snippet">Code Snippet</h2>
<p>Here’s the code to generate the attention bias:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_soft_spatial_attention_bias(temperature: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>, img_size: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, patch_size: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> torch.Tensor:</span>
<span id="cb1-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Create a soft spatial attention bias based on Euclidean distance between image patch positions.</span></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb1-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a [H*W, 2] grid of 2D positions</span></span>
<span id="cb1-6">    coords <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.stack(torch.meshgrid(</span>
<span id="cb1-7">        torch.arange(img_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> patch_size),</span>
<span id="cb1-8">        torch.arange(img_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> patch_size),</span>
<span id="cb1-9">        indexing<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xy'</span>), dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-10">    )</span>
<span id="cb1-11">    coords <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> coords.reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># [num_tokens, 2]</span></span>
<span id="cb1-12"></span>
<span id="cb1-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute pairwise squared Euclidean distances: [num_tokens, num_tokens]</span></span>
<span id="cb1-14">    dists <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cdist(coords.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>(), coords.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>(), p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb1-15"></span>
<span id="cb1-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply temperature</span></span>
<span id="cb1-17">    bias <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.softmax(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>dists <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> temperature, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-18">    bias <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.log(bias)</span>
<span id="cb1-19"></span>
<span id="cb1-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reshape to [1, 1, num_tokens, num_tokens] for use in attention</span></span>
<span id="cb1-21">    bias <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bias.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-22"></span>
<span id="cb1-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> bias</span></code></pre></div>
<p>We add this bias to the attention logits. It acts like a soft mask that encourages each token to attend mostly to nearby tokens — very much like a convolution. As training progresses, we increase the temperature to flatten the bias, eventually restoring global attention.</p>
</section>
</section>
<section id="results" class="level1">
<h1>Results</h1>
<p>To evaluate the effectiveness of soft spatial attention bias, we trained two ViTs on ImageNet-1K under identical settings, except for the use of spatial bias annealing:</p>
<ol type="1">
<li><strong>Baseline</strong>: Standard ViT with global attention from the beginning</li>
<li><strong>With Soft Spatial Bias</strong>: ViT trained with spatial attention bias annealing</li>
</ol>
<p>We report both final Top-1 accuracy:</p>
<div class="results">
<table class="caption-top table">
<thead>
<tr class="header">
<th>Metric</th>
<th>Baseline</th>
<th>With Soft Spatial Bias</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Final Top-1 Accuracy</td>
<td>9.9%</td>
<td>34.5%</td>
</tr>
</tbody>
</table>
</div>
<div id="fig-acc_by_steps" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-acc_by_steps-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://www.englert.ai/posts/004_vit_attention_mask/acc_by_steps.svg" class="img-fluid figure-img" style="width:99.0%">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-acc_by_steps-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;2: <strong>Comparison of training convergence between baseline ViT and ViT with soft spatial attention bias.</strong> The model with spatial bias annealing converges faster and achieves higher accuracy at early training stages compared to the baseline.
</figcaption>
</figure>
</div>
<p>These results suggest that introducing soft spatial bias improves early convergence and training stability. Final performance depends on other factors such as data scale and augmentation strategy, but this method appears to reliably smooth out optimization in the early stages.</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>This post explored why Vision Transformers (ViTs) are often considered data-hungry — not merely due to model size, but because of how attention behaves early in training. Random attention patterns lead to destructive information mixing and noisy gradients when training with a small batch size.</p>
<p>We showed that one way to address this is by introducing a soft spatial attention bias that restricts attention to nearby patches early in training and gradually relaxes this constraint. This process — which we refer to as attention annealing — mimics the local-to-global structure of CNNs, but keeps the flexibility of attention-based models.</p>
<p>Importantly, this approach does not require architectural changes, additional parameters, or more data. It simply adds a spatial prior to help stabilize early training and reduce gradient noise. As the model gains capacity to learn meaningful representations, this prior fades away.</p>
<p>While this method addresses the issue of gradient noise and batch size sensitivity, it does not solve everything. A second challenge remains: how to learn attention patterns that generalize well from limited data.</p>
</section>
<section id="citation" class="level1">
<h1>Citation</h1>
<p>Cited as:</p>
<pre><code>Englert, Brunó B. (Jul 2025). Why Do Vision Transformers Need So Much Data and How to (Partially) Fix It?. https://englert.ai/posts/004_vit_attention_mask/englert_ai_4_vit_attention_mask.html.</code></pre>
<p>Or</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode ruby code-with-copy"><code class="sourceCode ruby"><span id="cb3-1"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">@article</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">{</span>englert2025spatialattnbiasanealing,</span>
<span id="cb3-2">  title   <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Why Do Vision Transformers Need So Much Data and How to (Partially) Fix It?"</span>,</span>
<span id="cb3-3">  author  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Englert, Brunó B."</span>,</span>
<span id="cb3-4">  journal <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"englert.ai"</span>,</span>
<span id="cb3-5">  year    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2025"</span>,</span>
<span id="cb3-6">  month   <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Jul"</span>,</span>
<span id="cb3-7">  url     <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://englert.ai/posts/004_vit_attention_mask/englert_ai_4_vit_attention_mask.html"</span></span>
<span id="cb3-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="code" class="level1">
<h1>Code</h1>


</section>

 ]]></description>
  <category>deep</category>
  <guid>https://www.englert.ai/posts/004_vit_attention_mask/englert_ai_4_vit_attention_mask.html</guid>
  <pubDate>Tue, 08 Jul 2025 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Controlling a Vocal Tract With a Neural Network</title>
  <dc:creator>Bruno Englert</dc:creator>
  <link>https://www.englert.ai/posts/003_neural_tract/englert_ai_3_neural_tract.html</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p><img style="float: left; padding-right: 10px; padding-top: 10px; padding-bottom: 10px; padding-left: 10px;" width="40%" src="https://www.englert.ai/posts/003_neural_tract/vocaltract_illustration.png"></p>
<p>There is a site called <a href="https://dood.al/pinktrombone/">Pink Trombone</a> — a browser-based vocal tract simulation where you can drag around control points with your mouse and hear bizarrely lifelike vocal sounds. There’s no text, no phonemes. Just a simple simulation of airflow through a deformable tube that resembles the human vocal tract. As you drag the glottis slider or reshape the oral cavity, the sound changes. And if you’re patient — and precise — you can get it to say vowel-like sounds, or even whole syllables.</p>
<p>This simulator inspired a research question: could we train a neural network to automatically control this simulated vocal tract to generate intelligible speech? That is, instead of manually manipulating sliders, can a machine learn to shape the simulated vocal tract in a way that produces coherent speech? This question became the basis for an investigation into hybrid speech synthesis — a method that combines deep learning with physical models to produce speech through a controllable, differentiable physical simulation.</p>
<section id="how-humans-speak" class="level2">
<h2 class="anchored" data-anchor-id="how-humans-speak">How Humans Speak</h2>
<p>Understanding how humans produce speech provides crucial context for modeling it computationally. Unlike conventional speech synthesis systems that directly predict audio waveforms or spectrograms, human speech is the emergent result of a physical process. It starts with airflow from the lungs, which is shaped by the glottis and further modified by the geometry of the vocal tract.</p>
<p>The glottis — the opening between the vocal folds — plays a central role. When the vocal folds are brought close and set into vibration, they produce a periodic pressure source, creating voiced sounds such as vowels. When the folds are apart and stationary, the airflow is unmodulated, leading to voiceless sounds like fricatives (e.g., “s” or “f”).</p>
<p>This sound source then propagates through the vocal tract, which includes the throat, mouth, and nasal passages. The configuration of these structures acts as a dynamic filter, amplifying or attenuating specific frequency components based on its geometry. This filtering effect, governed by the resonant properties of the vocal tract, gives rise to the acoustic qualities of different phonemes.</p>
<p>From a modeling perspective, the key insight is that speech is not generated by manipulating acoustic properties directly but by controlling muscle movements that shape the tract. Traditional deep learning models for speech synthesis — such as WaveNet or Tacotron — bypass this by directly predicting waveform amplitudes or spectrogram features. While effective, these models do not mirror the human production mechanism and are computationally intensive due to the need to predict 44,100 audio samples per second for a high-fidelity, CD-quality audio.</p>
</section>
<section id="simulating-a-vocal-tract-the-digital-waveguide" class="level2">
<h2 class="anchored" data-anchor-id="simulating-a-vocal-tract-the-digital-waveguide">Simulating a Vocal Tract: The Digital Waveguide</h2>
<p>Simulating the vocal tract digitally isn’t a new idea. There’s a long history of simulating speech production using physics-inspired approaches, especially for articulatory synthesis. One particularly efficient approach is based on digital waveguides. To model the vocal tract physically, we rely on the theory of wave propagation in tubes. The continuous wave equation governs how sound pressure propagates through a medium:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5Cpartial%5E2%20p(x,%20t)%7D%7B%5Cpartial%20t%5E2%7D%20=%20c%5E2%20%5Cfrac%7B%5Cpartial%5E2%20p(x,%20t)%7D%7B%5Cpartial%20x%5E2%7D%0A"></p>
<p>where (p(x, t)) is the sound pressure at position (x) and time (t), and (c) is the speed of sound in air.</p>
<p>This equation can be solved numerically by discretizing both time and space. The digital waveguide model represents the solution as the sum of two discrete traveling waves — one moving rightward <img src="https://latex.codecogs.com/png.latex?(p_r(n))">, and one leftward <img src="https://latex.codecogs.com/png.latex?(p_l(n))">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ap(x,%20nT)%20=%20p_r(n)%20+%20p_l(n)%0A"></p>
<p>In Python, this simply can be represented as two n-length lists, where each floating-point list element is the magnitude of the sound pressure.</p>
<p>Each segment of the vocal tract is modeled as a tube with a specific cross-sectional area. When waves travel through segments with differing cross-sectional areas (such as in the vocal tract), partial reflections occur at each junction between segments. These reflections happen due to the mismatch in acoustic impedance, which depends directly on the cross-sectional area. At each junction, the reflection coefficient <img src="https://latex.codecogs.com/png.latex?r"> is defined by the relative difference of adjacent cross-sectional areas <img src="https://latex.codecogs.com/png.latex?A_i"> and <img src="https://latex.codecogs.com/png.latex?A_%7Bi+1%7D">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ar%20=%20%5Cfrac%7BA_i%20-%20A_%7Bi+1%7D%7D%7BA_i%20+%20A_%7Bi+1%7D%7D%0A"> In this work, a deep learning model is predicting the diameter of the cross-sections of each tract segment.</p>
<p>This reflection coefficient determines how much of the wave is reflected back and how much continues forward. We calculate the outgoing pressures <img src="https://latex.codecogs.com/png.latex?(p%5E-)"> at a junction from the incoming pressures (<img src="https://latex.codecogs.com/png.latex?p%5E+">) using these reflection coefficients:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0Ap_i%5E-%20&amp;=%20p_%7Bi+1%7D%5E+%20+%20r(p_i%5E+%20-%20p_%7Bi+1%7D%5E+)%20%5C%5C%0Ap_%7Bi+1%7D%5E-%20&amp;=%20p_i%5E+%20+%20r(p_i%5E+%20-%20p_%7Bi+1%7D%5E+)%0A%5Cend%7Baligned%7D%0A"> With this one equation, we can calculate the next new sound pressures as they propagate through the digital waveguide. This digital waveguide, as said previously, is simply represented as two lists in Python. We will use this equation as is in our code to do the simulation.</p>
<p>Through these discretized equations, the digital waveguide captures the physics of wave reflections and transmissions, allowing a somewhat realistic simulation of a vocal tract. This is only glimpse into how digital waveguide work, for a more complete explanation please read Jack Mullen’s PhD thesis: <a href="https://www-users.york.ac.uk/~dtm3/Download/JackThesis.pdf">Physical Modelling of the Vocal Tract with the 2D Digital Waveguide Mesh</a></p>
</section>
</section>
<section id="method" class="level1">
<h1>Method</h1>
<div id="fig-main" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-main-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://www.englert.ai/posts/003_neural_tract/neuraltract_diagram3_simplified.svg" class="img-fluid figure-img" style="width:90.0%">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-main-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: Model diagram of the hybrid speech synthesis method. This is a <strong>simplified</strong> version used for this blog post, where the source is the original audio.
</figcaption>
</figure>
</div>
<p>Our hybrid speech synthesis system integrates a digital waveguide simulation with a deep neural network. The method has three primary components: (1) glottal source, (2) neural network prediction of vocal tract diameters, and (3) digital waveguide simulation driven by predicted diameters.</p>
<section id="glottal-source" class="level2">
<h2 class="anchored" data-anchor-id="glottal-source">Glottal Source</h2>
<div id="fig-spectrogram_vowels" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-spectrogram_vowels-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<video width="100%" src="viz_spectrogram_vowels.mp4" controls="">
</video>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-spectrogram_vowels-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;2: The consonants mostly occupy the 6-20kHz range as highlighted with the red rectangles.
</figcaption>
</figure>
</div>
<p>A purely digital waveguide based vocal tract alone isn’t sufficient to simulate realistic speech because the vocal folds (glottis) play a crucial role in generating the raw sound and adding energy into the system. The glottis itself is particularly important for voiced sounds like vowels. However, full glottal modeling is complex and would typically require a dedicated sub-network or parametric model (e.g.&nbsp;glottal flow models). For the sake of keeping things simple for this blog post, we introduce a gross oversimplification: the glottal source primarily contributes to low-frequency energy (under ~6kHz), while higher-frequency components are produced by the tract.</p>
<p>This is based on the assumption that voiced sounds (vowels) primarily occupy lower frequencies, which are heavily influenced by glottal vibration, while voiceless sounds (like ‘s’ or ‘f’) often appear as white noise in higher frequencies (in fact, the glottis itself is usually not able to vibrate more that ~1100Hz <a href="https://en.wikipedia.org/wiki/Vocal_range">source</a>). This assumption allows us to bypass complex deep learning methods (like WaveGlow a neural network-based vocoder from 2018) for glottal prediction, focusing instead on predicting only the higher frequencies with the digital vocal tract.</p>
<p>Thus, we extract the 0–6kHz band from the original audio to serve as a surrogate glottal source and use white noise as a high-frequency excitation input to the digital waveguide.</p>
</section>
<section id="hybrid-speech-synthesis" class="level2">
<h2 class="anchored" data-anchor-id="hybrid-speech-synthesis">Hybrid Speech Synthesis</h2>
<p>We use a neural network to predict the tract diameters. The input to this neural network is the mel-spectrogram, from which it predicts the tract diameters. These diameters directly influence the reflection coefficients and thus determine the resonance and filtering properties of the simulated vocal tract.</p>
<p>To be able to output pressure, we need to input pressure (or, more precisely, energy) to the simulated tract. To do so, we feed white noise into the digital waveguide. This white noise serves as a neutral input (same way the lung puts pressure/energy into the vocal tract) that is shaped by the predicted vocal tract diameters.</p>
<p>The final synthesized audio is created by adding together the original 0-6kHz audio (representing the glottal output) and the high-frequency audio generated by the digital waveguide simulation.</p>
</section>
<section id="training-loss" class="level2">
<h2 class="anchored" data-anchor-id="training-loss">Training Loss</h2>
<p>Backpropagation is performed through both the neural network and the digital waveguide, enabling end-to-end learning of a system that physically models speech synthesis. The training loss uses a Mean Squared Error (MSE) loss between the spectrograms of the original and generated audio, alongside an L1 loss for the raw audio wave values:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathcal%7BL%7D%20=%20%5Ctext%7BMSE%7D(%5Ctext%7BSpec%7D_%7Boriginal%7D,%20%5Ctext%7BSpec%7D_%7Bgenerated%7D)%20+%20%5Clambda%20%5Ccdot%20%5Ctext%7BL1%7D(%5Ctext%7BAudio%7D_%7Boriginal%7D,%20%5Ctext%7BAudio%7D_%7Bgenerated%7D)%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BSpec%7D_%7B%5Ctext%7Borig%7D%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BSpec%7D_%7B%5Ctext%7Bgen%7D%7D"> are the spectrograms of the original and generated audio respectively, and <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BAudio%7D_%7B%5Ctext%7Borig%7D%7D">, <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BAudio%7D_%7B%5Ctext%7Bgen%7D%7D"> are the raw waveforms. The hyperparameter <img src="https://latex.codecogs.com/png.latex?%5Clambda"> balances the two loss components.</p>
</section>
<section id="parallelizing-the-digital-waveguide" class="level2">
<h2 class="anchored" data-anchor-id="parallelizing-the-digital-waveguide">Parallelizing the Digital Waveguide</h2>
<div id="fig-parallel_waveguide" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-parallel_waveguide-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<video width="100%" src="viz_parallel_waveguide.mp4" controls="">
</video>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-parallel_waveguide-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;3: For the autoregressive waveguide, “four” sound pressures enter one by one, while for the parallelized waveguide, all the sound pressures enter at once into “four” different waveguides.
</figcaption>
</figure>
</div>
<p>A major challenge in using a traditional digital waveguides for high-fidelity audio synthesis is that they compute wave propagation sequentially, timestep by timestep. This means that generating one second of audio at a sampling rate of 44.1kHz, we would need to execute a “for loop” of 44,100 sequential steps. This makes digital waveguides computationally slow on parallel hardware such as GPUs. The issue is exacerbated that we would have to do backpropagation through 44,100 steps, which causes out of memory issues and the training would not be even possible.</p>
<p>To address this, we exploit the linearity of the wave equation: each individual input to the vocal tract simulation can be treated independently. Because wave propagation in air interfere additively, the total response of the system to a sequence of inputs can be computed as the sum of the system’s response to each input individually. In our case, this means that the total output from the vocal tract can be expressed as the sum of outputs resulting from each individual input sample.</p>
<p>Thus, we can parallelize the simulation by treating each input excitation (e.g., an impulse at a given time) as an independent event. Rather than simulating the tract state step-by-step over time, we simulate how each input sample propagates through the vocal tract independently. Since the system is linear, we can simultaneously compute these responses, and after running these independent simulations, the total output can simply be obtained by adding up the contributions from each input sample. This reframing transforms the process from a time-ordered simulation into a parallel computation over independent events.</p>
<p>Due to energy losses from reflections and boundary conditions (e.g., at the mouth or nasal cavity), the influence of each input to the vocal tract decays rapidly. In practice, this means that after a few dozens of simulation steps, the amplitude of an input is so small that it is no longer significant to the output, and thus we can ignore it. We can use this to our advantage and limit the number of simulation steps. By limiting each simulation to a small, finite number of steps, roughly corresponding to the length of the vocal tract (plus a few additional steps), we ensure the computation remains efficient.</p>
<p>In short, parallelization is achieved by independently computing wave propagation for all input samples in parallel and then summing their contributions. This parallelizing approach makes a physical digital wave simulation feasible on modern GPUs. On top of this, all previously described steps are differentiable, thus making an end-to-end training possible.</p>
</section>
</section>
<section id="results" class="level1">
<h1>Results</h1>
<p>To evaluate the proposed method, we conducted experiments comparing three forms of audio:</p>
<ol type="1">
<li>The original full-bandwidth (44.1kHz sampling rate) speech audio.</li>
<li>A version filtered to only include 0–6kHz frequencies, simulating a simplified glottal source.</li>
<li>The final reconstructed signal, where the neural network predicts vocal tract shapes and the digital waveguide generates high-frequency content (6–20kHz), which is then combined with the glottal source (0–6kHz).</li>
</ol>
<p>Below, we present several examples from the evaluation set:</p>
<div id="fig-spectograms" class="quarto-layout-panel">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-spectograms-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.englert.ai/posts/003_neural_tract/39700.png" class="img-fluid figure-img" style="width:98.0%"></p>
<figcaption>Spectrogram 1</figcaption>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.englert.ai/posts/003_neural_tract/39850.png" class="img-fluid figure-img" style="width:98.0%"></p>
<figcaption>Spectrogram 2</figcaption>
</figure>
</div>
</div>
</div>
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.englert.ai/posts/003_neural_tract/39900.png" class="img-fluid figure-img" style="width:98.0%"></p>
<figcaption>Spectrogram 3</figcaption>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.englert.ai/posts/003_neural_tract/40000.png" class="img-fluid figure-img" style="width:98.0%"></p>
<figcaption>Spectrogram 4</figcaption>
</figure>
</div>
</div>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-spectograms-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;4: Spectograms showing from top to bottom: (1) the low-resolution (0-6kHz) glottal input, (2) amplitude modulated white noise (6-20kHz), (3) reconstructed high-fidelity audio (0-20kHz), (4) difference between the reconstructed and the original audio, and (5) original high-fidelity audio (0-20kHz)
</figcaption>
</figure>
</div>
<p>Qualitatively, the original audio exhibits the full dynamic range of natural speech. In contrast, the glottal source audio, while retaining the overall pitch and voicing, lacks clarity — it sounds muffled due to the absence of higher-frequency resonances. The reconstructed audio shows a clear improvement over the glottal source: it restores consonant sharpness and it is no longer muffled, necessary for intelligibility and naturalness. This suggests that the learned control over the waveguide-based vocal tract can effectively reintroduce the quality lost in the glottal-only signal. Even though the simulation focuses only on high frequencies, it provides sufficient structure to restore intelligibility of the audio.</p>
<table class="caption-top table">
<colgroup>
<col style="width: 18%">
<col style="width: 40%">
<col style="width: 40%">
</colgroup>
<thead>
<tr class="header">
<th>Audio Type</th>
<th>Example 1</th>
<th>Example 2</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Original Audio</td>
<td><audio src="audio/38400_orig.wav" controls=""></audio></td>
<td><audio src="audio/38800_orig.wav" controls=""></audio></td>
</tr>
<tr class="even">
<td>Glottal Source (0–6kHz)</td>
<td><audio src="audio/38400_compressed.wav" controls=""></audio></td>
<td><audio src="audio/38800_compressed.wav" controls=""></audio></td>
</tr>
<tr class="odd">
<td>Reconstructed Audio</td>
<td><audio src="audio/38400_uncompressed.wav" controls=""></audio></td>
<td><audio src="audio/38800_uncompressed.wav" controls=""></audio></td>
</tr>
</tbody>
</table>
<table class="caption-top table">
<colgroup>
<col style="width: 18%">
<col style="width: 40%">
<col style="width: 40%">
</colgroup>
<thead>
<tr class="header">
<th>Audio Type</th>
<th>Example 3</th>
<th>Example 4</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Original Audio</td>
<td><audio src="audio/39400_orig.wav" controls=""></audio></td>
<td><audio src="audio/39800_orig.wav" controls=""></audio></td>
</tr>
<tr class="even">
<td>Glottal Source (0–6kHz)</td>
<td><audio src="audio/39400_compressed.wav" controls=""></audio></td>
<td><audio src="audio/39800_compressed.wav" controls=""></audio></td>
</tr>
<tr class="odd">
<td>Reconstructed Audio</td>
<td><audio src="audio/39400_uncompressed.wav" controls=""></audio></td>
<td><audio src="audio/39800_uncompressed.wav" controls=""></audio></td>
</tr>
</tbody>
</table>
<p>Since we are predicting tract diameters, we can also visualize it with an animation:</p>
<div id="fig-vocal_tract_with_audio" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-vocal_tract_with_audio-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<video width="100%" src="vocal_tract_with_audio.mp4" controls="">
</video>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-vocal_tract_with_audio-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;5: Animation of the predicted vocal tract diameters.
</figcaption>
</figure>
</div>
<p>Interestingly, during silent moments of the speech, the tract vibrates/jitters. This is probably because there is no supervision signal for the silent parts during training and jittering is not penalized in the loss function.</p>
</section>
<section id="discussion" class="level1">
<h1>Discussion</h1>
<p>The reader at this point could rightfully ask the question: what is the practical significance of this method? After all, the system starts from high-fidelity audio, downsamples it, and reconstructs it through a complex process.</p>
<p>As previously noted, this blog post is a simplified version of the proposed hybrid method. In the intended application, the system would not start from high-fidelity audio but from text. Specifically, from text, we predict a mel-spectrogram and generate a low-frequency glottal source signal (0–6 kHz band) using an off-the-shelf text-to-speach method. This defines a full text-to-speech (TTS) system architecture, as shown on Figure&nbsp;6.</p>
<p>Producing the glottal source is a challenging task. Physical models of glottal flow are not great in terms of realistic vocal sounds, so a deep learning model is typically required to generate the glottal waveform. However, if we simply use deep learning to directly predict high-fidelity audio from text — as done in methods like WaveNet — we face significant computational challenges. High-fidelity audio requires predicting 44,100 samples per second, making inference memory-intensive and produces high latency.</p>
<p>Thus, a key advantage of hybrid method is a reduced computational load at inference time. While we put a great effort into parallelizing the digital waveguide, in its natural form the waveguide is autoregressive. Thus, for each and every simulation step we instantly get an input. However, this is only great news, if the digital waveguide simulation itself is very fast.</p>
<p>To run the simulation, we only need to keep a small array of numbers in memory (usually an array storing ~100 values), which contains the state of the vocal tract. This small memory footprint allows us to easily run the digital waveguide simulation on cpu which is super-fast for iterative computations (the waveguide simulation during inference is basically a ‘while’ loop).</p>
<p>Moreover, the neural network that predicts tract diameters can also be fast. Human vocal tract movements are relatively slow (due to inertia) compared to audio sampling rates, meaning that tract diameter updates can occur much less frequently (e.g., every few milliseconds) without degrading speech quality.</p>
<p>Thus, using a hybrid approach shifts the computational burden, where the deep learning models predict slowly changing control parameters, while a fast physical simulator generates high-fidelity audio needed for natural-sounding audio.</p>
<div id="fig-main-diagram3_original" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-main-diagram3_original-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://www.englert.ai/posts/003_neural_tract/neuraltract_diagram3_original.svg" class="img-fluid figure-img" style="width:90.0%">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-main-diagram3_original-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;6: Model diagram of the hybrid speech synthesis method. This is the <strong>original</strong> version used, where the source is text. This version describes a full text-to-speech method.
</figcaption>
</figure>
</div>
</section>
<section id="acknowledgement" class="level1">
<h1>Acknowledgement</h1>
<p>This work was done during my BSc thesis under Csaba Zainkó’s supervision. This was later turned into an article (<a href="https://ieeexplore.ieee.org/document/8906280">https://ieeexplore.ieee.org/document/8906280</a>) coauthored by Csaba Zainkó and Géza Németh.</p>
</section>
<section id="citation" class="level1">
<h1>Citation</h1>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode ruby code-with-copy"><code class="sourceCode ruby"><span id="cb1-1"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">@article</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">{</span>englert2019wavetract,</span>
<span id="cb1-2">  title   <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"WaveTract: A hybrid generative model for speech synthesis"</span>,</span>
<span id="cb1-3">  author  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{Englert, Brunó B.} and {Zainkó, Csaba} and {Németh, Géza}"</span>,</span>
<span id="cb1-4">  booktitle <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"International Conference on Speech Technology and Human-Computer Dialogue (SpeD)"</span>,</span>
<span id="cb1-5">  year    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2019"</span>,</span>
<span id="cb1-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="code" class="level1">
<h1>Code</h1>
<p><a href="https://github.com/englertbruno/wavetract">https://github.com/englertbruno/wavetract</a></p>


</section>

 ]]></description>
  <category>deep</category>
  <guid>https://www.englert.ai/posts/003_neural_tract/englert_ai_3_neural_tract.html</guid>
  <pubDate>Sat, 19 Apr 2025 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Balancing the Inverted Pendulum: An Introduction to Fuzzy Logic Control</title>
  <dc:creator>Bruno Englert</dc:creator>
  <link>https://www.englert.ai/posts/002_fuzzy_control/englert_ai_2_fuzzy_control.html</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p><img style="float: left; padding-right: 10px; padding-top: 10px; padding-bottom: 10px; padding-left: 10px;" width="40%" src="https://www.englert.ai/posts/002_fuzzy_control/pendulum_illustration.png"></p>
<p>With some practice, it’s possible to balance a broom upright in our hand, relying largely on intuition rather than accurate measurements. Yet, the dynamics behind this seemingly simple act are more intricate than they appear. From an engineering perspective, this balancing act is analogous to the inverted pendulum, a classic problem in control theory.</p>
<p>The inverted pendulum is a system consisting of a tall rod, like our broom, but this time, it’s attached to a horizontally moving cart. The objective? Keep the rod upright, compensating for any disturbances that might knock it off balance. This control problem is complex due to the numerous degrees of freedom involved, but still straightforward enough to understand and simulate.</p>
<p>While mathematical solutions exist to keep the pendulum vertically upright, they require precise knowledge of the system’s parameters. Yet when we balance a broom, humans are clearly not relying on a mathematical model that depends on highly accurate measurements of angles and velocities. This suggests that for the inverted pendulum problem, it’s possible to design a successful controller without depending on precise measurements.</p>
<p>What if we wanted to introduce an element of that human intuition into our control systems? Enter fuzzy logic—a method that resembles human reasoning by working with concepts that aren’t strictly true or false but lie somewhere in between. For example, instead of processing exact numerical values, a fuzzy logic system might consider values like “almost upright” or “slightly tilted.” This approach offers flexibility, especially when precise data is unavailable or when a system needs to adjust to unforeseen challenges.</p>
<p>In the early 2000s, the number and variety of fuzzy logic applications increased significantly. They ranged from consumer products such as cameras, camcorders, washing machines, and microwave ovens to industrial process control, medical instrumentation, decision-support systems, and portfolio selection. Unlike standard logic, where variables can only take two values—True or False—fuzzy logic describes things in a vaguer form. Its variables can range between 0 and 1, characterizing a variable’s membership to a particular value. For instance, describing weather as “0.72 sunny and 0.18 cloudy” provides more information than simply stating “the weather today is sunny but not cloudy.” With fuzzy variables, one can construct operations known as fuzzy rules. These rules resemble human thinking and are structured as “If … then…” However, translating these rules into a soft mathematical form suitable for machine processing is essential.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.englert.ai/posts/002_fuzzy_control/cart.svg" class="img-fluid figure-img"></p>
<figcaption>Figure 1: Forces in the free-body diagram</figcaption>
</figure>
</div>
<p>Returning to our inverted pendulum on a cart problem, this system can be seen in Figure 1. Intuitively, the control force <img src="https://latex.codecogs.com/png.latex?F"> should be determined by the magnitudes of the input variables <img src="https://latex.codecogs.com/png.latex?%5Cphi"> and <img src="https://latex.codecogs.com/png.latex?%5Cdot%7B%5Cphi%7D">, which measure the angle of the pendulum from the upright position and its angular velocity, respectively. Using fuzzy logic, the relationship between these variables becomes linguistic, a much weaker form than exact measurements. Leveraging these linguistic variables, we can establish rules that determine the control <img src="https://latex.codecogs.com/png.latex?F"> using common sense knowledge. These rules can look like such as “If <img src="https://latex.codecogs.com/png.latex?%5Cphi"> is very small, then <img src="https://latex.codecogs.com/png.latex?F"> should be small,” or “If the pendulum is balanced, then hold very still, meaning do not apply any force.”</p>
</section>
<section id="fuzzy-logic" class="level1">
<h1>Fuzzy logic</h1>
<p>Now let us look in more detail at the design of a fuzzy controller. In our case, the controller receives its input as the pair <img src="https://latex.codecogs.com/png.latex?(%5Cphi,%5Cdot%7B%5Cphi%7D)">. We define this input space as <img src="https://latex.codecogs.com/png.latex?X%20%5Ctimes%20Y">, where intervals <img src="https://latex.codecogs.com/png.latex?X"> and <img src="https://latex.codecogs.com/png.latex?Y"> represent the degrees for <img src="https://latex.codecogs.com/png.latex?%5Cphi"> and degrees per second for <img src="https://latex.codecogs.com/png.latex?%5Cdot%7B%5Cphi%7D">, respectively. The output, or control space for <img src="https://latex.codecogs.com/png.latex?F">, falls within an interval that signifies the force in Newtons.</p>
<p>The linguistic labels representing this data are modeled as fuzzy subsets of the spaces <img src="https://latex.codecogs.com/png.latex?X">, <img src="https://latex.codecogs.com/png.latex?Y">, and <img src="https://latex.codecogs.com/png.latex?F">. These subsets are mapped using their respective membership functions. Common linguistic labels might include: negative big (NB), negative medium (NM), negative small (NS), positive small (PS), positive medium (PM), and positive big (PB).</p>
<p>Looking at these “If . . . then. . .” rules, we ask ourselves questions like the following: Is “If. . . then. . .” an implication operator in logic? How can one model linguistic labels like “small,” “medium,” and “large”? Given a finite number of “If. . . then. . .” rules, how can we handle all possible numerical inputs that will be measured by machine sensors, in order to produce actual control actions? The answers to all these basic questions lie in fuzzy logic theory. The term “fuzzy control” refers to the science of building fuzzy controllers based on the mathematics of fuzzy logic.</p>
<p>When we look at the “If… then…” rules, it raises several questions about their foundational logic. Does the “If… then…” structure represent a logical implication? How do we understand labels like “small”, “medium”, or “large” in this setting? And with a fixed number of “If… then…” rules, how does the system handle varied numerical inputs from sensors and then produce specific control actions? These questions can be answered by exploring fuzzy logic theory. Put simply, “fuzzy control” is about designing controllers using the mathematics of fuzzy logic. We’ll discuss these concepts further in the following sections.</p>
<p>One of the distinct advantages of fuzzy logic is its capacity to process a linguistic variable—a variable characterized by words rather than numbers. Interestingly, such rule-based systems have profound roots in classical AI, such as decision trees. Unlike conventional hard computing, soft computing is designed to navigate the inherent imprecision of the sensor measurements.</p>
<p>As an overview, let’s break down how the fuzzy decision process works step by step. Initially, a distinct set of input data is collected and transformed into a fuzzy set using fuzzy linguistic variables, terms, and membership functions – a process termed “fuzzification”. Following this, an inference phase takes place, using the set of “If… then…” rules. Finally, in the “defuzzification” step, the fuzzy output is converted back to a clear, distinct output through the use of membership functions. The full fuzzy logic process is illustrated in Figure 2.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.englert.ai/posts/002_fuzzy_control/fls.svg" class="img-fluid figure-img" style="width:130.0%"></p>
<figcaption>Figure 2: Fuzzy Logic System</figcaption>
</figure>
</div>
<section id="linguistic-variables" class="level2">
<h2 class="anchored" data-anchor-id="linguistic-variables">Linguistic Variables</h2>
<p>Linguistic variables are either the input or output variables of the system. Their values are words or sentences from natural language, not numerical values. Typically, a linguistic variable is broken down into a set of linguistic terms. For example, in the context of an inverted pendulum, let the angle <img src="https://latex.codecogs.com/png.latex?%5Cphi"> be the linguistic variable symbolizing the angle formed with the upper vertical position. To qualify the angle, we naturally use linguistic terms such as “slightly slanted” and “falling over”. Using this intuition, we can define a mapping functions, such as <img src="https://latex.codecogs.com/png.latex?%5Cphi(t)="> {negative big (NB) angle, negative medium (NM) angle, negative small (NS) angle, positive small (PS) angle, positivev medium (PM) angle, and positive big (PB) angle}. This can be the set of decomposition for the linguistic variable angle. Each member of this decomposition is called a linguistic term and can cover a portion of the overall values of the angle.</p>
</section>
<section id="membership-functions" class="level2">
<h2 class="anchored" data-anchor-id="membership-functions">Membership Functions</h2>
<p>Membership functions are used in the fuzzification and defuzzification steps of the fuzzy logic system, to map the non-fuzzy input values to fuzzy linguistic terms and vice versa. A membership function quantifies a linguistic term. For instance, Figure [fig:Membership-funtions-of-angle] shows the membership functions for the linguistic terms of the angle variable. An important characteristic of fuzzy logic is that a numerical value does not have to be fuzzified using only one membership function. In other words, a value can belong to multiple sets at the same time. For example, according to Figure [fig:Membership-funtions-of-angle], an angle value can be considered as “negative small” and “negative medium” at the same time, with different degrees of memberships.</p>
</section>
<section id="fuzzy-rules" class="level2">
<h2 class="anchored" data-anchor-id="fuzzy-rules">Fuzzy Rules</h2>
<p>Within a fuzzy logic system, a rule base is constructed to control the output variable. A fuzzy rule is a simple IF-THEN rule with a condition and a conclusion.</p>
</section>
<section id="fuzzy-set-operations" class="level2">
<h2 class="anchored" data-anchor-id="fuzzy-set-operations">Fuzzy Set Operations</h2>
<p>The evaluations of the fuzzy rules and the combination of the results of the individual rules are performed using fuzzy set operations. The operations on fuzzy sets are different from the operations on non-fuzzy sets. Let <img src="https://latex.codecogs.com/png.latex?%5Cmu_A"> and <img src="https://latex.codecogs.com/png.latex?%5Cmu_B"> represent the membership functions for fuzzy sets <img src="https://latex.codecogs.com/png.latex?A"> and <img src="https://latex.codecogs.com/png.latex?B">. Unlike in conventional Boolean algebra we can have different definitions for the logic operator. The table below lists potential fuzzy operations for OR and AND operators:</p>
<table class="caption-top table">
<colgroup>
<col style="width: 16%">
<col style="width: 30%">
<col style="width: 19%">
<col style="width: 34%">
</colgroup>
<thead>
<tr class="header">
<th></th>
<th><strong>OR (Union)</strong></th>
<th></th>
<th><strong>AND (Intersection)</strong></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>MAX</strong></td>
<td><img src="https://latex.codecogs.com/png.latex?Max%5C%7B%5Cmu_A(x),%20%5Cmu_B(x)%5C%7D"></td>
<td><strong>MIN</strong></td>
<td><img src="https://latex.codecogs.com/png.latex?Min%5C%7B%5Cmu_A(x),%20%5Cmu_B(x)%5C%7D"></td>
</tr>
<tr class="even">
<td><strong>ASUM</strong></td>
<td><img src="https://latex.codecogs.com/png.latex?%5Cmu_A(x)%20+%20%5Cmu_B(x)%20-%20%5Cmu_A(x)%20%5Cmu_B(x)"></td>
<td><strong>PROD</strong></td>
<td><img src="https://latex.codecogs.com/png.latex?%5Cmu_A(x)%20%5Cmu_B(x)"></td>
</tr>
<tr class="odd">
<td><strong>BSUM</strong></td>
<td><img src="https://latex.codecogs.com/png.latex?Min%5C%7B1,%20%5Cmu_A(x)%20+%20%5Cmu_B(x)%5C%7D"></td>
<td><strong>BDIF</strong></td>
<td><img src="https://latex.codecogs.com/png.latex?Max%5C%7B0,%20%5Cmu_A(x)%20+%20%5Cmu_B(x)%20-%201%5C%7D"></td>
</tr>
</tbody>
</table>
<p>After evaluating the result of each rule, these results need to be merged to obtain a final result. This process is called inference. There are different methods that can combine the outcomes of individual rules. The table below contains possible accumulation methods that are used to combine the results of individual rules. The MAX operator is typically used for accumulation.</p>
<table class="caption-top table">
<colgroup>
<col style="width: 19%">
<col style="width: 80%">
</colgroup>
<thead>
<tr class="header">
<th>Operation</th>
<th>Formula</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Maximum</td>
<td><img src="https://latex.codecogs.com/png.latex?Max%5C%7B%5Cmu_A(x),%5Cmu_B(x)%5C%7D"></td>
</tr>
<tr class="even">
<td>Bounded sum</td>
<td><img src="https://latex.codecogs.com/png.latex?Min%5C%7B1,%20%5Cmu_A(x)+%5Cmu_B(x)%5C%7D"></td>
</tr>
<tr class="odd">
<td>Normalized sum</td>
<td><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cmu_A(x)+%5Cmu_B(x)%7D%7BMax%5C%7B1,Max%5C%7B%5Cmu_A(x%5E%7B'%7D),%5Cmu_B(x%5E%7B'%7D)%5C%7D%5C%7D%7D"></td>
</tr>
</tbody>
</table>
</section>
<section id="defuzzification" class="level2">
<h2 class="anchored" data-anchor-id="defuzzification">Defuzzification</h2>
<p>The final step is defuzzification. Following the inference step, we are left with a fuzzy value. This value must be transformed aka defuzzified, to yield our control output. Defuzzification is carried out based on the membership function of the output variable. The result of the inference step is illustrated on Figure 3, where the shaded areas collectively represent the fuzzy outcome. Our objective is to extract a definitive value from this fuzzy representation. This is denoted by a dot in the figure. The defuzzification process is depicted in Figure 3. Several algorithms exist for defuzzification, where the most commonly used algorithms are listed in this table:</p>
<table class="caption-top table">
<colgroup>
<col style="width: 36%">
<col style="width: 63%">
</colgroup>
<thead>
<tr class="header">
<th>Operation</th>
<th>Formula</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Center of Gravity</td>
<td><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cint_%7Bmin%7D%5E%7Bmax%7Du%5Cmu(u)%20du%7D%7B%5Cint_%7Bmin%7D%5E%7Bmax%7D%5Cmu(u)du%7D"></td>
</tr>
<tr class="even">
<td>Center of Gravity for Singletons</td>
<td><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Csum_%7Bi=1%7D%5E%7Bp%7D%5B%5Cmu_iu_i%5D%7D%7B%5Csum_%7Bi=1%7D%5E%7Bp%7D%5B%5Cmu_i%5D%7D"></td>
</tr>
</tbody>
</table>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.englert.ai/posts/002_fuzzy_control/defuzzification.svg" class="img-fluid figure-img" style="width:130.0%"></p>
<figcaption>Figure 3: Defuzzification</figcaption>
</figure>
</div>
</section>
</section>
<section id="method-and-implementation" class="level1">
<h1>Method and implementation</h1>
<section id="input-parameters-and-fuzzification" class="level2">
<h2 class="anchored" data-anchor-id="input-parameters-and-fuzzification">1. Input Parameters and Fuzzification</h2>
<p>In the fuzzy control system designed for this application, the primary inputs are the angle <img src="https://latex.codecogs.com/png.latex?%5Cphi"> and angular speed <img src="https://latex.codecogs.com/png.latex?%5Cdot%5Cphi">. These values represent the current state of the system and serve as the basis for our fuzzy logic evaluations.</p>
<p>To make these numerical inputs compatible with the fuzzy control system, they need to be fuzzified. Fuzzification is the process of assigning a degree of membership to each value in a set. For our system, the membership functions used are Gaussian in nature and are defined as: <img src="https://latex.codecogs.com/png.latex?f(x)=e%5E%5Cfrac%7B-(x-a)%5E2%7D%7B2%5Csigma%5E2%7D"></p>
<p>The fuzzified values are then categorized into six linguistic variables, represented as: - <strong>NB</strong> (Negative Big) - <strong>NM</strong> (Negative Medium) - <strong>NS</strong> (Negative Small) - <strong>PS</strong> (Positive Small) - <strong>PM</strong> (Positive Medium) - <strong>PB</strong> (Positive Big)</p>
<p>One might wonder, that if we have access to accurate measurements, which is the case in this simulation since we are running a simulation, why would we intentionally get rid of accurate measurements? The reason is that this is just a toy example for fuzzy control logic, and even though we have accurate measurements, we are not going to take advantage of this fact.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.englert.ai/posts/002_fuzzy_control/angle_membership_transparent.png" class="img-fluid figure-img"></p>
<figcaption>Figure 4: Membership functions of angle</figcaption>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.englert.ai/posts/002_fuzzy_control/angular_speed_membership_transparent.png" class="img-fluid figure-img"></p>
<figcaption>Figure 5: Membership functions of angular speed</figcaption>
</figure>
</div>
</section>
<section id="rule-base-construction" class="level2">
<h2 class="anchored" data-anchor-id="rule-base-construction">2. Rule Base Construction</h2>
<p>Using the these linguistic variables, we construct a comprehensive rule base, as outlined in the table below:</p>
<table class="caption-top table">
<thead>
<tr class="header">
<th><img src="https://latex.codecogs.com/png.latex?%5Cphi%5Ctextbackslash%5Cdot%7B%5Cphi%7D"></th>
<th>NB</th>
<th>NM</th>
<th>NS</th>
<th>PS</th>
<th>PM</th>
<th>PB</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>NB</td>
<td>NB</td>
<td>NB</td>
<td>NB</td>
<td>NM</td>
<td>NS</td>
<td>PS</td>
</tr>
<tr class="even">
<td>NM</td>
<td>NB</td>
<td>NB</td>
<td>NM</td>
<td>NS</td>
<td>PS</td>
<td>PS</td>
</tr>
<tr class="odd">
<td>NS</td>
<td>NB</td>
<td>NM</td>
<td>NS</td>
<td>PS</td>
<td>PS</td>
<td>PM</td>
</tr>
<tr class="even">
<td>PS</td>
<td>NM</td>
<td>NS</td>
<td>NS</td>
<td>PS</td>
<td>PM</td>
<td>PB</td>
</tr>
<tr class="odd">
<td>PM</td>
<td>NS</td>
<td>NS</td>
<td>PS</td>
<td>PM</td>
<td>PB</td>
<td>PB</td>
</tr>
<tr class="even">
<td>PB</td>
<td>NS</td>
<td>PS</td>
<td>PM</td>
<td>PB</td>
<td>PB</td>
<td>PB</td>
</tr>
</tbody>
</table>
<p>This rule table should be read the following way:</p>
<p>• <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7B%5Ctextit%7BIF%20angle%20is%20NB%20and%20angular%20speed%20is%20NB%20then%20the%20control%20force%20is%20NB.%7D%7D"></p>
<p>• <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7B%5Ctextit%7BIF%20angle%20is%20NB%20and%20angular%20speed%20is%20NM%20then%20the%20control%20force%20is%20NB.%7D%7D"></p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cvdots"></p>
<p>• <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7B%5Ctextit%7BIF%20angle%20is%20PB%20and%20angular%20speed%20is%20PB%20then%20the%20control%20force%20is%20PB.%7D%7D"></p>
</section>
<section id="defuzzification-1" class="level2">
<h2 class="anchored" data-anchor-id="defuzzification-1">3. Defuzzification</h2>
<p>After establishing the membership values for each control force label (NB, NM, NS, PS, PM, PB), we proceed to the defuzzification step. This is crucial as the fuzzy logic system produces outputs in the form of a range of values, which needs to be translated into a distinct scalar output to implement in real-world systems.</p>
<p>For this purpose, the Centre of Gravity for Singletons operation is employed. This algorithm computes a crisp value, representing the control force to be applied to the cart. In simpler terms, based on the fuzzy outputs and the associated membership values, it calculates a single, unambiguous control force that best represents the desired action.</p>
</section>
</section>
<section id="putting-it-all-together" class="level1">
<h1>Putting it all together</h1>
<p>Now that we defined the system, we can write our lil fuzzy logic system:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.englert.ai/posts/002_fuzzy_control/car_sim_screenshot_transparent.png" class="img-fluid figure-img"></p>
<figcaption>Figure 6: Screenshot of the running simulation</figcaption>
</figure>
</div>
<div id="cell-3" class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> gaussian(x, mu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>, sig<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>):</span>
<span id="cb1-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.exp(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>np.power(x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> mu, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.power(sig, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span>)))</span>
<span id="cb1-6"></span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> fuzzy_and(a, b, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"max"</span>):</span>
<span id="cb1-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"max"</span>:</span>
<span id="cb1-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.fmax(a, b)</span>
<span id="cb1-11"></span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> fuzzy_and_array(a, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"max"</span>):</span>
<span id="cb1-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"max"</span>:</span>
<span id="cb1-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(a, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-16"></span>
<span id="cb1-17"></span>
<span id="cb1-18"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> fuzzy_or(a, b, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"min"</span>):</span>
<span id="cb1-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"min"</span>:</span>
<span id="cb1-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.fmin(a, b)</span>
<span id="cb1-21"></span>
<span id="cb1-22"></span>
<span id="cb1-23"></span>
<span id="cb1-24"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> FuzzyControl:</span>
<span id="cb1-25">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-26">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.resolution <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span></span>
<span id="cb1-27">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.go_left <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span></span>
<span id="cb1-28">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.no_change <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span></span>
<span id="cb1-29">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.go_right <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span></span>
<span id="cb1-30">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span></span>
<span id="cb1-31">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.sample_points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.r, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.r, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.resolution)</span>
<span id="cb1-32"></span>
<span id="cb1-33">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> fuzzify(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, angle, angular_speed):</span>
<span id="cb1-34">        angle_memberships <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb1-35">        angular_speed_memberships <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb1-36">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#</span></span>
<span id="cb1-37">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> angle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>:</span>
<span id="cb1-38">            angle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span></span>
<span id="cb1-39">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> angle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>:</span>
<span id="cb1-40">            angle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span></span>
<span id="cb1-41">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> angular_speed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>:</span>
<span id="cb1-42">            angular_speed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span></span>
<span id="cb1-43">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> angular_speed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>:</span>
<span id="cb1-44">            angular_speed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span></span>
<span id="cb1-45"></span>
<span id="cb1-46">        angle_mu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">50.</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">18.</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">18.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">50.</span>]</span>
<span id="cb1-47">        angle_sig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">15.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">9.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">9.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">15.</span>]</span>
<span id="cb1-48">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>):</span>
<span id="cb1-49">            angle_memberships.append(gaussian(angle, angle_mu[i], sig<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>angle_sig[i]))</span>
<span id="cb1-50"></span>
<span id="cb1-51">        angular_speed_mu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">45.</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">15.</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">15.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">45.</span>]</span>
<span id="cb1-52">        angular_speed_sig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">14.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">7.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">7.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">14.</span>]</span>
<span id="cb1-53">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>):</span>
<span id="cb1-54">            angular_speed_memberships.append(gaussian(angular_speed, angular_speed_mu[i], sig<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>angular_speed_sig[i]))</span>
<span id="cb1-55">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> angle_memberships, angular_speed_memberships</span>
<span id="cb1-56"></span>
<span id="cb1-57">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> inference(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, angle_memberships, angular_speed_membership):</span>
<span id="cb1-58">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#</span></span>
<span id="cb1-59">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># How to interpret the rule base:</span></span>
<span id="cb1-60">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># NB: negative big, NM: negative medium, NS: negative small</span></span>
<span id="cb1-61">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># PB: positive big, PM: positive medium, PS: positive small</span></span>
<span id="cb1-62">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The table:</span></span>
<span id="cb1-63">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#    NB, NM, NS, PS, PM, PB angular speed</span></span>
<span id="cb1-64">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># NB  0   0   0   1   2   3</span></span>
<span id="cb1-65">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># NM  0   0   1   2   3   3</span></span>
<span id="cb1-66">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># NS  0   1   2   3   3   4</span></span>
<span id="cb1-67">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># PS  1   2   2   3   4   5</span></span>
<span id="cb1-68">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># PM  2   2   3   4   5   5</span></span>
<span id="cb1-69">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># PB  2   3   4   5   5   5</span></span>
<span id="cb1-70">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># angle</span></span>
<span id="cb1-71">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#</span></span>
<span id="cb1-72">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># One cell contains the control force:</span></span>
<span id="cb1-73">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 0 NB, 1 NM, 2 NS, 3 PS, 4 PM, 5 PB</span></span>
<span id="cb1-74">        rule_base <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>],</span>
<span id="cb1-75">                     [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>],</span>
<span id="cb1-76">                     [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>],</span>
<span id="cb1-77">                     [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>],</span>
<span id="cb1-78">                     [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>],</span>
<span id="cb1-79">                     [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]]</span>
<span id="cb1-80"></span>
<span id="cb1-81">        fuzzy_control_force <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>]</span>
<span id="cb1-82">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>):</span>
<span id="cb1-83">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>):</span>
<span id="cb1-84">                pt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fuzzy_or(angle_memberships[i], angular_speed_membership[k])</span>
<span id="cb1-85">                fuzzy_control_force[rule_base[i][k]] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fuzzy_and(fuzzy_control_force[rule_base[i][k]], pt)</span>
<span id="cb1-86"></span>
<span id="cb1-87">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, mu <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>([h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> h <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]]):</span>
<span id="cb1-88">            fuzzy_control_force[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fuzzy_or(gaussian(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.sample_points, mu, sig<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span>), fuzzy_control_force[i])</span>
<span id="cb1-89">        fuzzy_control_force <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fuzzy_and_array(np.asarray(fuzzy_control_force))</span>
<span id="cb1-90">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> fuzzy_control_force</span>
<span id="cb1-91"></span>
<span id="cb1-92">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> defuzzify(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, fuzzy_control_force):</span>
<span id="cb1-93">        rv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.sample_points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> fuzzy_control_force) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-8</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(fuzzy_control_force) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-8</span>)</span>
<span id="cb1-94">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> rv</span>
<span id="cb1-95"></span>
<span id="cb1-96">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@staticmethod</span></span>
<span id="cb1-97">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw_member_functions():</span>
<span id="cb1-98">        resolution <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb1-99">        angle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>, resolution)</span>
<span id="cb1-100">        angular_speed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, resolution)</span>
<span id="cb1-101"></span>
<span id="cb1-102">        angle_memberships <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb1-103">        angular_speed_memberships <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb1-104">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(resolution):</span>
<span id="cb1-105">            a, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FuzzyControl.fuzzify(angle[i], angular_speed[i])</span>
<span id="cb1-106">            angle_memberships.append(a)</span>
<span id="cb1-107">            angular_speed_memberships.append(b)</span>
<span id="cb1-108"></span>
<span id="cb1-109">        angle_memberships <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.asarray(angle_memberships)</span>
<span id="cb1-110">        angular_speed_memberships <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.asarray(angular_speed_memberships)</span>
<span id="cb1-111"></span>
<span id="cb1-112">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(angle_memberships.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]):</span>
<span id="cb1-113">            plt.plot(angle, angle_memberships[:, i])</span>
<span id="cb1-114">        plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Angle Memberships"</span>)</span>
<span id="cb1-115">        plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Degree"</span>)</span>
<span id="cb1-116">        plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Membership value"</span>)</span>
<span id="cb1-117">        plt.show()</span>
<span id="cb1-118"></span>
<span id="cb1-119">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(angular_speed_memberships.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]):</span>
<span id="cb1-120">            plt.plot(angular_speed, angular_speed_memberships[:, i])</span>
<span id="cb1-121">            plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Angular Speed Memberships"</span>)</span>
<span id="cb1-122">        plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Degree/sec"</span>)</span>
<span id="cb1-123">        plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Membership value"</span>)</span>
<span id="cb1-124">        plt.show()</span></code></pre></div>
</details>
</div>
</section>
<section id="citation" class="level1">
<h1>Citation</h1>
<p>Cited as:</p>
<pre><code>Englert, Brunó B. (Jul 2023). Balancing the Inverted Pendulum: An Introduction to Fuzzy Logic Control. https://englert.ai/posts/002_fuzzy_control/englert_ai_2_fuzzy_control.html.</code></pre>
<p>Or</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode ruby code-with-copy"><code class="sourceCode ruby"><span id="cb3-1"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">@article</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">{</span>englert2023fuzzy,</span>
<span id="cb3-2">  title   <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Balancing the Inverted Pendulum: An Introduction to Fuzzy Logic Control"</span>,</span>
<span id="cb3-3">  author  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Englert, Brunó B."</span>,</span>
<span id="cb3-4">  journal <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"englert.ai"</span>,</span>
<span id="cb3-5">  year    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023"</span>,</span>
<span id="cb3-6">  month   <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Jul"</span>,</span>
<span id="cb3-7">  url     <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://englert.ai/posts/002_fuzzy_control/englert_ai_2_fuzzy_control.html"</span></span>
<span id="cb3-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">}</span></span></code></pre></div>
<p>The code to reproduce the visualization:</p>
<div id="cell-6" class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> numba <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> jit</span>
<span id="cb4-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> numba <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> prange</span>
<span id="cb4-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> math</span>
<span id="cb4-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> arcade</span>
<span id="cb4-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> multiprocessing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> mp</span>
<span id="cb4-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb4-7"></span>
<span id="cb4-8">SCREEN_WIDTH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1200</span></span>
<span id="cb4-9">SCREEN_HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">600</span></span>
<span id="cb4-10"></span>
<span id="cb4-11"></span>
<span id="cb4-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@jit</span>(nopython<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb4-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> _step(dt, friction, x0, phi, omega, cart_speed, force_on_cart, pre_A, pre_B, pre_C):</span>
<span id="cb4-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> prange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>):</span>
<span id="cb4-15">        cosphi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.cos(phi)</span>
<span id="cb4-16">        sinphi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>np.sin(phi)</span>
<span id="cb4-17">        friction_force <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>friction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> cart_speed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.sign(cart_speed)</span>
<span id="cb4-18"></span>
<span id="cb4-19">        cart_acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ((cosphi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> pre_A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> omega <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> force_on_cart <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> friction_force) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> pre_B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span></span>
<span id="cb4-20">                    (pre_A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">9.81</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> cosphi) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (pre_A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>sinphi)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-21">                   (pre_C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> pre_B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> pre_A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>sinphi<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>pre_A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>sinphi)</span>
<span id="cb4-22"></span>
<span id="cb4-23">        beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>cart_acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> pre_A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> sinphi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (pre_A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">9.81</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> cosphi)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> pre_B</span>
<span id="cb4-24"></span>
<span id="cb4-25">        x0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> cart_speed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dt</span>
<span id="cb4-26">        cart_speed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> cart_acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dt</span>
<span id="cb4-27">        phi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> dt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> omega</span>
<span id="cb4-28">        omega <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> dt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> beta</span>
<span id="cb4-29"></span>
<span id="cb4-30">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> x0, phi, omega, cart_speed, friction_force</span>
<span id="cb4-31"></span>
<span id="cb4-32"></span>
<span id="cb4-33"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Pendulum:</span>
<span id="cb4-34">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, dt, length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">200.</span>, pendulum_mass<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, cart_mass<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, friction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0008</span>):</span>
<span id="cb4-35">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dt</span>
<span id="cb4-36">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> length</span>
<span id="cb4-37">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pendulum_mass <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pendulum_mass</span>
<span id="cb4-38">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cart_mass <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cart_mass</span>
<span id="cb4-39">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.total_mass <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cart_mass <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pendulum_mass)</span>
<span id="cb4-40">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.polemass_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pendulum_mass <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.length)</span>
<span id="cb4-41">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.friction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> friction</span>
<span id="cb4-42">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rotation_friction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> friction</span>
<span id="cb4-43"></span>
<span id="cb4-44">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.manager <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mp.Manager()</span>
<span id="cb4-45">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.manager.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>()</span>
<span id="cb4-46">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.state[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x0"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span></span>
<span id="cb4-47">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.state[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y0"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span></span>
<span id="cb4-48">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.state[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x1"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span></span>
<span id="cb4-49">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.state[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y1"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span></span>
<span id="cb4-50">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.state[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"phi"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.pi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-1</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># angle</span></span>
<span id="cb4-51">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.state[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"omega"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># angular speed</span></span>
<span id="cb4-52">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.state[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cart_speed"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span></span>
<span id="cb4-53">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.state[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"friction_force"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span></span>
<span id="cb4-54">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.state[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"force_on_cart"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span></span>
<span id="cb4-55">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.state[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"is_close"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb4-56"></span>
<span id="cb4-57">        p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mp.Process(target<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.step, args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.state,))</span>
<span id="cb4-58">        p.daemon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb4-59">        p.start()</span>
<span id="cb4-60"></span>
<span id="cb4-61">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> step(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, state):</span>
<span id="cb4-62">        pre_A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pendulum_mass <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.length</span>
<span id="cb4-63">        pre_B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pendulum_mass <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pendulum_mass <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb4-64">        pre_C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cart_mass <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pendulum_mass</span>
<span id="cb4-65"></span>
<span id="cb4-66">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> state[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"is_close"</span>]:</span>
<span id="cb4-67">            state[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x0"</span>], <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-68">            state[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"phi"</span>], <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-69">            state[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"omega"</span>], <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-70">            state[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cart_speed"</span>], <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-71">            state[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"friction_force"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _step(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dt,</span>
<span id="cb4-72">                                            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.friction,</span>
<span id="cb4-73">                                            state[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x0"</span>],</span>
<span id="cb4-74">                                            state[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"phi"</span>],</span>
<span id="cb4-75">                                            state[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"omega"</span>],</span>
<span id="cb4-76">                                            state[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cart_speed"</span>],</span>
<span id="cb4-77">                                            state[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"force_on_cart"</span>],</span>
<span id="cb4-78">                                            pre_A,</span>
<span id="cb4-79">                                            pre_B,</span>
<span id="cb4-80">                                            pre_C)</span></code></pre></div>
</details>
</div>
<div id="cell-7" class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Simulation:</span>
<span id="cb5-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb5-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pendulum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Pendulum(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.00005</span>)</span>
<span id="cb5-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.shift <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span></span>
<span id="cb5-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.shift</span>
<span id="cb5-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.shift</span>
<span id="cb5-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pendulum.state[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x1"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.shift</span>
<span id="cb5-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pendulum.state[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y1"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.shift</span>
<span id="cb5-9"></span>
<span id="cb5-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.user_applied_force <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb5-11"></span>
<span id="cb5-12">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fuzzy_control <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FuzzyControl()</span>
<span id="cb5-13">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.is_control_active <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb5-14"></span>
<span id="cb5-15">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fuzzy_control_force <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fuzzy_control.resolution,))</span>
<span id="cb5-16">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.control_force <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span></span>
<span id="cb5-17">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fuzzy_control.draw_member_functions()</span>
<span id="cb5-18"></span>
<span id="cb5-19">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> step(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb5-20">        angle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ((<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pendulum.state[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"phi"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.pi) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">360</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">360</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">180</span></span>
<span id="cb5-21">        angular_speed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pendulum.state[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"omega"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.pi) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">360</span></span>
<span id="cb5-22">        angle_memberships, angular_speed_memberships <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fuzzy_control.fuzzify(angle, angular_speed)</span>
<span id="cb5-23">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fuzzy_control_force <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fuzzy_control.inference(angle_memberships,</span>
<span id="cb5-24">                                                                angular_speed_memberships)</span>
<span id="cb5-25">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.control_force <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fuzzy_control.defuzzify(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fuzzy_control_force)</span>
<span id="cb5-26">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.is_control_active:</span>
<span id="cb5-27">            c_f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.control_force</span>
<span id="cb5-28">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb5-29">            c_f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span></span>
<span id="cb5-30">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pendulum.state[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"force_on_cart"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> c_f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.user_applied_force</span>
<span id="cb5-31"></span>
<span id="cb5-32">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> toggle_control(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb5-33">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.is_control_active <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.is_control_active</span>
<span id="cb5-34"></span>
<span id="cb5-35">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb5-36">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">""" Draw our rectangle """</span></span>
<span id="cb5-37">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pendulum.state[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x0"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.shift</span>
<span id="cb5-38">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pendulum.state[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y0"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.shift</span>
<span id="cb5-39">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pendulum.state[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x0"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pendulum.length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> math.cos(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pendulum.state[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'phi'</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.shift</span>
<span id="cb5-40">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pendulum.length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> math.sin(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pendulum.state[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'phi'</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.shift</span>
<span id="cb5-41"></span>
<span id="cb5-42">        overflow <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> SCREEN_WIDTH) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> SCREEN_WIDTH</span>
<span id="cb5-43">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> overflow</span>
<span id="cb5-44">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> overflow</span>
<span id="cb5-45"></span>
<span id="cb5-46">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Draw cart</span></span>
<span id="cb5-47">        arcade.draw_rectangle_outline(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x0, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y0, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, arcade.color.BLACK)</span>
<span id="cb5-48">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Draw pendulum</span></span>
<span id="cb5-49">        arcade.draw_line(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x0, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y0, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x1, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y1, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>arcade.color.RED, line_width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb5-50">        arcade.draw_circle_filled(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x0, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y0, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, arcade.color.BLACK)</span>
<span id="cb5-51">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Draw wheels</span></span>
<span id="cb5-52">        wheel_distance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span></span>
<span id="cb5-53">        arcade.draw_circle_filled(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> wheel_distance, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, arcade.color.BLACK)</span>
<span id="cb5-54">        arcade.draw_circle_filled(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> wheel_distance, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, arcade.color.BLACK)</span>
<span id="cb5-55">        arcade.draw_commands.draw_arc_filled(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> wheel_distance, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>],</span>
<span id="cb5-56">                                             start_angle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb5-57">                                             end_angle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, tilt_angle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">360</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.pi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>))</span>
<span id="cb5-58">        arcade.draw_commands.draw_arc_filled(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> wheel_distance, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>],</span>
<span id="cb5-59">                                             start_angle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb5-60">                                             end_angle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, tilt_angle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">360</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.pi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>))</span>
<span id="cb5-61">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Terrain</span></span>
<span id="cb5-62">        arcade.draw_line(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>, SCREEN_WIDTH, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>, arcade.color.BLACK, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb5-63"></span>
<span id="cb5-64">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Draw applied force from fuzzy control</span></span>
<span id="cb5-65">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [x <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fuzzy_control.resolution)]</span>
<span id="cb5-66">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fuzzy_control.resolution <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb5-67">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> x]</span>
<span id="cb5-68">        y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fuzzy_control_force.tolist()</span>
<span id="cb5-69">        y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _y <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> y]</span>
<span id="cb5-70">        y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb5-71"></span>
<span id="cb5-72">        points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(x, y))</span>
<span id="cb5-73">        arcade.draw_polygon_outline(points, [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">191</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span>], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb5-74">        arcade.draw_text(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fuzzy control before defuzzification"</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fuzzy_control.resolution <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb5-75">                         arcade.color.BLACK, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>)</span>
<span id="cb5-76"></span>
<span id="cb5-77">        <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw_force(center, force, y, color, thickness<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, multiplier<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>):</span>
<span id="cb5-78">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> force <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb5-79">                left <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> center</span>
<span id="cb5-80">                right <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.fmin(center <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> force <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> multiplier, SCREEN_WIDTH)</span>
<span id="cb5-81">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb5-82">                left <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.fmax(center <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> force <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> multiplier, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb5-83">                right <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> center</span>
<span id="cb5-84"></span>
<span id="cb5-85">            arcade.draw_lrtb_rectangle_filled(left, right, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> thickness, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> thickness, color)</span>
<span id="cb5-86"></span>
<span id="cb5-87">        draw_force(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x0, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.control_force, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>arcade.color.BLUSH)</span>
<span id="cb5-88">        draw_force(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x0, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pendulum.state[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"friction_force"</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y0, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>arcade.color.BLUE_GREEN)</span>
<span id="cb5-89">        draw_force(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x0, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.user_applied_force, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>arcade.color.YELLOW_ORANGE)</span>
<span id="cb5-90"></span>
<span id="cb5-91">        text_y0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb5-92">        text_y_diff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span></span>
<span id="cb5-93">        width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span></span>
<span id="cb5-94">        arcade.draw_text(</span>
<span id="cb5-95">            text<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{:0.2f}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">N Control force"</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.control_force),</span>
<span id="cb5-96">            start_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>SCREEN_WIDTH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,</span>
<span id="cb5-97">            start_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>text_y0,</span>
<span id="cb5-98">            color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>arcade.color.BLUSH,</span>
<span id="cb5-99">            font_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>,</span>
<span id="cb5-100">            align<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'right'</span>,</span>
<span id="cb5-101">            anchor_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'right'</span>,</span>
<span id="cb5-102">            width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>width)</span>
<span id="cb5-103">        arcade.draw_text(</span>
<span id="cb5-104">            text<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{:0.2f}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">N Friction force"</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pendulum.state[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"friction_force"</span>]),</span>
<span id="cb5-105">            start_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>SCREEN_WIDTH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,</span>
<span id="cb5-106">            start_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>text_y0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> text_y_diff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb5-107">            color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>arcade.color.BLUE_GREEN,</span>
<span id="cb5-108">            font_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>,</span>
<span id="cb5-109">            align<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'right'</span>,</span>
<span id="cb5-110">            anchor_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'right'</span>,</span>
<span id="cb5-111">            width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>width)</span>
<span id="cb5-112">        arcade.draw_text(</span>
<span id="cb5-113">            text<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{:0.2f}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">N User applied force"</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.user_applied_force),</span>
<span id="cb5-114">            start_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>SCREEN_WIDTH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,</span>
<span id="cb5-115">            start_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>text_y0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> text_y_diff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb5-116">            color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>arcade.color.YELLOW_ORANGE,</span>
<span id="cb5-117">            font_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>,</span>
<span id="cb5-118">            align<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'right'</span>,</span>
<span id="cb5-119">            anchor_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'right'</span>,</span>
<span id="cb5-120">            width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>width)</span>
<span id="cb5-121">        arcade.draw_text(</span>
<span id="cb5-122">            text<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{:0.2f}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">° Angle"</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(((<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pendulum.state[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"phi"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.pi) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">360</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">360</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">180</span>),</span>
<span id="cb5-123">            start_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>SCREEN_WIDTH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,</span>
<span id="cb5-124">            start_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>text_y0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> text_y_diff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,</span>
<span id="cb5-125">            color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>arcade.color.BLACK,</span>
<span id="cb5-126">            font_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>,</span>
<span id="cb5-127">            align<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'right'</span>,</span>
<span id="cb5-128">            anchor_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'right'</span>,</span>
<span id="cb5-129">            width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>width)</span>
<span id="cb5-130">        arcade.draw_text(</span>
<span id="cb5-131">            text<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{:0.2f}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">°/s Angular speed"</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pendulum.state[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"omega"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.pi) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">360</span>),</span>
<span id="cb5-132">            start_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>SCREEN_WIDTH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,</span>
<span id="cb5-133">            start_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>text_y0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> text_y_diff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,</span>
<span id="cb5-134">            color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>arcade.color.BLACK,</span>
<span id="cb5-135">            font_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>,</span>
<span id="cb5-136">            align<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'right'</span>,</span>
<span id="cb5-137">            anchor_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'right'</span>,</span>
<span id="cb5-138">            width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>width)</span></code></pre></div>
</details>
</div>
<div id="cell-8" class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"></span>
<span id="cb6-2"></span>
<span id="cb6-3"></span>
<span id="cb6-4"></span>
<span id="cb6-5"></span>
<span id="cb6-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Application(arcade.Window):</span>
<span id="cb6-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">""" Main application class. """</span></span>
<span id="cb6-8"></span>
<span id="cb6-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, width, height):</span>
<span id="cb6-10">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(width, height, title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fuzzy Control Logic On Pendulum"</span>)</span>
<span id="cb6-11">        arcade.set_background_color(arcade.color.WHITE)</span>
<span id="cb6-12">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.simulation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb6-13"></span>
<span id="cb6-14">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> setup(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb6-15">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">""" Set up the game and initialize the variables. """</span></span>
<span id="cb6-16">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.set_update_rate(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">160</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set fps</span></span>
<span id="cb6-17">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.simulation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Simulation()</span>
<span id="cb6-18"></span>
<span id="cb6-19">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, dt):</span>
<span id="cb6-20">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">""" Move everything """</span></span>
<span id="cb6-21">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(1/dt)</span></span>
<span id="cb6-22">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.simulation.step()</span>
<span id="cb6-23"></span>
<span id="cb6-24"></span>
<span id="cb6-25">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> on_draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb6-26">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb6-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Render the screen.</span></span>
<span id="cb6-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb6-29">        arcade.start_render()</span>
<span id="cb6-30">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.simulation.draw()</span>
<span id="cb6-31"></span>
<span id="cb6-32">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> on_key_press(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, key, modifiers):</span>
<span id="cb6-33">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Called whenever a key is pressed. """</span></span>
<span id="cb6-34">        force <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.</span></span>
<span id="cb6-35">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> arcade.key.LEFT:</span>
<span id="cb6-36">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.simulation.user_applied_force <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>force</span>
<span id="cb6-37">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> arcade.key.RIGHT:</span>
<span id="cb6-38">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.simulation.user_applied_force <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> force</span>
<span id="cb6-39">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> arcade.key.SPACE:</span>
<span id="cb6-40">            arcade.window_commands.pause(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span>
<span id="cb6-41">            image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> arcade.draw_commands.get_image()</span>
<span id="cb6-42">            image.save(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'screenshot.png'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PNG'</span>)</span>
<span id="cb6-43"></span>
<span id="cb6-44">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> on_key_release(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, key, modifiers):</span>
<span id="cb6-45">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Called whenever a key is pressed. """</span></span>
<span id="cb6-46">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> arcade.key.LEFT:</span>
<span id="cb6-47">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.simulation.user_applied_force <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb6-48"></span>
<span id="cb6-49">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> arcade.key.RIGHT:</span>
<span id="cb6-50">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.simulation.user_applied_force <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb6-51"></span>
<span id="cb6-52">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> arcade.key.ENTER:</span>
<span id="cb6-53">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.simulation.toggle_control()</span>
<span id="cb6-54"></span>
<span id="cb6-55">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> on_close(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb6-56">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.simulation.pendulum.state[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"is_close"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb6-57">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().on_close()</span>
<span id="cb6-58"></span>
<span id="cb6-59"></span>
<span id="cb6-60"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__main__"</span>:</span>
<span id="cb6-61">    window <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Application(SCREEN_WIDTH, SCREEN_HEIGHT)</span>
<span id="cb6-62">    window.setup()</span>
<span id="cb6-63">    arcade.run()</span></code></pre></div>
</details>
</div>


</section>

 ]]></description>
  <category>control</category>
  <guid>https://www.englert.ai/posts/002_fuzzy_control/englert_ai_2_fuzzy_control.html</guid>
  <pubDate>Fri, 28 Jul 2023 22:00:00 GMT</pubDate>
</item>
<item>
  <title>2D Physics of The Inverted Pendulum on a Cart</title>
  <dc:creator>Bruno Englert</dc:creator>
  <link>https://www.englert.ai/posts/001_inverted_pendulum/englert_ai_1_cart_physics.html</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>The system we are going to describe consists of an inverted pendulum mounted on a motorized cart. This is very similar when you want to try keep the broom upwards on the tip of your finger. But why is it challenging?</p>
<p>The problem is inherently unstable. Like our broomstick, once it starts to move away from its equilibrium position (straight up), gravity works to accelerate its fall. The system is also non-linear. The relation between inputs (force we exert on the broomstick) and outputs (the broomstick’s angle) isn’t directly proportional. That makes predicting and controlling its behavior a beautiful puzzle. This system is a classic example of a nonlinear and inherently unstable setup, but it’s also simple enough to understand and simulate.</p>
<p>To make our life easier, let’s consider a simplified two-dimensional case. This system consists of two parts: the cart and the pendulum. The cart can only move horizontally, and the pendulum can freely swing back and forth. We can control the system by applying a horizontal force, <img src="https://latex.codecogs.com/png.latex?F">, on the cart. We get feedback from the system in the form of three observations: the angle of the pendulum, the angular velocity and its angular acceleration. Using the equations of motions can help us understand how to control and balance such a system.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.englert.ai/posts/001_inverted_pendulum/cart.svg" class="img-fluid figure-img"></p>
<figcaption>Forces on the cart. Red denotes forces exerted on the cart, while green forces denote forces exerted on the pendulum. ‘x’ is the position of the cart.</figcaption>
</figure>
</div>
</section>
<section id="equations-of-motion" class="level1">
<h1>Equations of motion</h1>
<section id="carts-motion" class="level2">
<h2 class="anchored" data-anchor-id="carts-motion">Cart’s Motion</h2>
<p>Let’s start with the motion of the cart. When we push the cart, it experiences several forces: its own inertia due to its mass “M,” a damping factor “b” related to friction, and the force “N” coming from the pendulum.</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Bequation%7D%0A%20%20%20%20M%5Cddot%7Bx%7D+b%5Cdot%7Bx%7D+N%20=%20F%0A%5Cend%7Bequation%7D"></p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?M"> is the mass of the cart.</li>
<li><img src="https://latex.codecogs.com/png.latex?b"> friction coefficient.</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cdot%7Bx%7D"> is the velocity of the cart.</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cddot%7Bx%7D"> is the acceleration of the cart.</li>
<li><img src="https://latex.codecogs.com/png.latex?N"> is the reaction force from the pendulum.</li>
<li><img src="https://latex.codecogs.com/png.latex?F"> is the force we apply to the cart.</li>
</ul>
<p>The term <img src="https://latex.codecogs.com/png.latex?M%5Cddot%7Bx%7D"> represents the force due to the cart’s acceleration. Essentially, Newton’s second law tells us that the force exerted on an object is directly proportional to its mass and acceleration.</p>
<p>The next term, <img src="https://latex.codecogs.com/png.latex?b%5Cdot%7Bx%7D">, accounts for the force opposing the cart’s movement, primarily due to friction. The friction coefficient, <img src="https://latex.codecogs.com/png.latex?b">, quantifies the amount of resistive force the cart faces, which increases with the cart’s velocity <img src="https://latex.codecogs.com/png.latex?%5Cdot%7Bx%7D">. So, the faster the cart is moving, the greater the friction force it encounters.</p>
<p>Lastly, <img src="https://latex.codecogs.com/png.latex?N"> is the reaction force exerted by the pendulum on the cart. As the pendulum swings, it applies a force on the cart, which the cart must counteract to maintain balance. We don’t know <img src="https://latex.codecogs.com/png.latex?N"> yet, that’s why we just noted it with an arbitrarily chosen letter. In the following section we are determining the value <img src="https://latex.codecogs.com/png.latex?N"> takes.</p>
<p>Note that we only summed the forces on the horizontal axis. You can also sum the forces in the vertical direction for the cart, but since the cart is unable to move vertically, this is unnecessary.</p>
</section>
<section id="pendulums-motion" class="level2">
<h2 class="anchored" data-anchor-id="pendulums-motion">Pendulum’s Motion</h2>
<p>When discussing the motion of the pendulum, it’s crucial to consider both the horizontal and vertical forces acting on it. This is because the pendulum, unlike the cart, can move in both directions due to its rotational nature.</p>
<section id="horizontal" class="level3">
<h3 class="anchored" data-anchor-id="horizontal">Horizontal</h3>
<p>The horizontal forces acting on the pendulum are captured by the equation:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Bequation%7D%0AN%20=%20m%5Cddot%7Bx%7D+ml%5Cddot%7B%5Ctheta%7D%5Ccos%5Ctheta-ml%5Cdot%7B%5Ctheta%7D%5E2%5Csin%5Ctheta%0A%5Cend%7Bequation%7D"></p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?m"> is the mass of the pendulum.</li>
<li><img src="https://latex.codecogs.com/png.latex?l"> is the length of the pendulum.</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Ctheta"> is the angle of the pendulum.</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cdot%7B%5Ctheta%7D"> is the angular velocity</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cddot%7B%5Ctheta%7D"> is the angular acceleration.</li>
<li><img src="https://latex.codecogs.com/png.latex?N"> is the pendulum’s reaction force.</li>
</ul>
<p>This equation essentially describes how the pendulum’s motion is influenced by the cart’s movement and its own inertia. The term <img src="https://latex.codecogs.com/png.latex?m%5Cddot%7Bx%7D"> is the force exerted on the pendulum due to the acceleration of the cart. The term <img src="https://latex.codecogs.com/png.latex?ml%5Cddot%7B%5Ctheta%7D%5Ccos%5Ctheta"> describes the force on the pendulum due to its own angular acceleration, while −<img src="https://latex.codecogs.com/png.latex?ml%5Cdot%7B%5Ctheta%7D%5E2%5Csin%5Ctheta"> accounts for the centrifugal force acting on the pendulum as it swings.</p>
<p>Now, we can substitute this back in to the cart’s equation, which gives us: <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Bequation%7D%0A%20%20%20%20(M+m)%5Cddot%7Bx%7D+b%5Cdot%7Bx%7D+ml%5Cddot%7B%5Ctheta%7D%5Ccos%5Ctheta-ml%5Cdot%7B%5Ctheta%7D%5E2%5Csin%5Ctheta=F%0A%5Clabel%7Beq:horizontal%7D%20%20%5Ctag%7B1%7D%0A%5Cend%7Bequation%7D"></p>
</section>
<section id="vertical" class="level3">
<h3 class="anchored" data-anchor-id="vertical">Vertical</h3>
<p>So far we only dealt with the horizontal forces. To get the vertical forces for this system, we sum the forces perpendicular to the pendulum:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Bequation%7D%0AP%5Csin%5Ctheta+N%5Ccos%5Ctheta-mg%5Csin%5Ctheta=ml%5Cddot%7B%5Ctheta%7D+m%5Cddot%7Bx%7D%5Ccos%5Ctheta%0A%5Cend%7Bequation%7D"></p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?P"> is the vertical component the cart is pushing back on the pendulum.</li>
<li><img src="https://latex.codecogs.com/png.latex?g"> is the acceleration due to gravity.</li>
</ul>
<p>In this equation, <img src="https://latex.codecogs.com/png.latex?P"> is the vertical component of the reaction force with which the cart pushes back on the pendulum. The gravitational force acting on the pendulum is represented by <img src="https://latex.codecogs.com/png.latex?mg%5Csin%5Ctheta">, which tries to pull the pendulum downward. The right side of the equation relates to the forces due to the pendulum’s angular acceleration and the cart’s linear acceleration.</p>
<p>We need to get rid of <img src="https://latex.codecogs.com/png.latex?P"> and <img src="https://latex.codecogs.com/png.latex?N">. To do that we sum the moments about the centroid of the pendulum to get the following equation: <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Bequation%7D%0A-Pl%5Csin%5Ctheta-Nl%5Ccos%5Ctheta=I%5Cddot%7B%5Ctheta%7D%0A%5Cend%7Bequation%7D"></p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?I"> is the mass moment of inertia of the pendulum.</li>
</ul>
<p>Combining these last two expressions, we get the vertical forces of the system: <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Bequation%7D%0A(I+ml%5E2)%5Cddot%7B%5Ctheta%7D+mgl%5Csin%5Ctheta=-ml%5Cddot%7Bx%7D%5Ccos%5Ctheta%0A%5Clabel%7Beq:vertical%7D%20%20%5Ctag%7B2%7D%0A%5Cend%7Bequation%7D"></p>
<p>In our case <img src="https://latex.codecogs.com/png.latex?I=m(%5Cfrac%7Bl%7D%7B2%7D)%5E2">, (you can look up the moment of inertia for different shaped objects).</p>
</section>
</section>
</section>
<section id="matrix-form-of-the-system" class="level1">
<h1>Matrix Form of the System</h1>
<p>From Equation <img src="https://latex.codecogs.com/png.latex?%5Ceqref%7Beq:horizontal%7D"> and Equation <img src="https://latex.codecogs.com/png.latex?%5Ceqref%7Beq:vertical%7D"> we can write the final equations of motion:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign*%7D%0A%5Cbegin%7Bbmatrix%7D%0A%20%20M+m%20&amp;%20mlcos(%5Ctheta)%20%5C%5C%0A%20%20cos(%5Ctheta)ml%20&amp;%20m(%5Cfrac%7Bl%7D%7B2%7D)%5E2%20+%20m%7Bl%7D%5E2%0A%5Cend%7Bbmatrix%7D%20%20%0A%5Cbegin%7Bbmatrix%7D%0A%20%20%5Cddot%7Bx%7D%20%5C%5C%0A%20%20%5Cddot%7B%5Ctheta%7D%0A%5Cend%7Bbmatrix%7D%20=%0A%5Cbegin%7Bbmatrix%7D%0A%20%20F+ml%7B%5Cdot%7B%5Ctheta%7D%7D%5E2%5Csin(%5Ctheta)-b%5Cdot%7Bx%7D%20%5C%5C%0A%20%20-mgl%20sin(%5Ctheta)%0A%5Cend%7Bbmatrix%7D%0A%5Cend%7Balign*%7D"></p>
<p>This is in the form <img src="https://latex.codecogs.com/png.latex?As=b">, where we are looking for <img src="https://latex.codecogs.com/png.latex?s">, which describes the current state of the system, such as the cart’s acceleration and pendulum’s angular acceleration. If we can solve the equation for <img src="https://latex.codecogs.com/png.latex?s">, we can get the accelerations and run a simulation. This can be done, by getting the inverse of <img src="https://latex.codecogs.com/png.latex?A">, such as: <img src="https://latex.codecogs.com/png.latex?s=b%5ET*%7B(A%5ET)%7D%5E%7B-1%7D">. After we get <img src="https://latex.codecogs.com/png.latex?s">, we can use Euler’s method to calculate the position of the cart and the pendulum.</p>
</section>
<section id="running-a-simulation-using-eulers-method" class="level1">
<h1>Running a Simulation Using Euler’s Method:</h1>
<p>The beauty of Euler’s method is its simplicity. We’re essentially predicting the future (next state of the system) based on the present (current state) and a tiny step forward in time. It is a numerical technique to approximate a solution, where the exact solution can’t be calculated or just too hard to calculate. Formally, given an initial state, the method estimates the next state by taking a small step based on the rate of change.</p>
<p>However, a word of caution: Euler’s method isn’t perfect. The smaller the step, the more accurate our predictions, but it also means more computational work. We can spead up the simulation by taking larger steps, but in turn this leads to inaccuracies.</p>
<p>In our pendulum+cart case, we actually never determined the exact position of the cart for a given time <img src="https://latex.codecogs.com/png.latex?t">. We have no clue where is the pendulum e.g.&nbsp;after 12 seconds, by substituting the values back into the equation we derived above. We only described how the system changes from one moment to another. However, if we know how the system changes, we can still calculate how it will move around as time passes. If we have an initial state and by only doing very small steps (we can do this since we know how the system changes), we can approximate where the cart and pendulum will be as time passes.</p>
<p>So in a more formal way:</p>
<ol type="1">
<li>Start with initial conditions for <img src="https://latex.codecogs.com/png.latex?x">, <img src="https://latex.codecogs.com/png.latex?%5Cdot%7Bx%7D">, <img src="https://latex.codecogs.com/png.latex?%5Ctheta">, and <img src="https://latex.codecogs.com/png.latex?%5Cdot%7B%5Ctheta%7D">.</li>
<li>Calculate accelerations <img src="https://latex.codecogs.com/png.latex?%5Cddot%7Bx%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Cddot%7B%5Ctheta%7D"> using the matrix equations.</li>
<li>Update the velocities and positions:
<ul>
<li><img src="https://latex.codecogs.com/png.latex?%5Cdot%7Bx%7D_%7Bnew%7D=%5Cdot%7Bx%7D_%7Bold%7D+%5Cddot%7Bx%7D%5Ctimes"> <img src="https://latex.codecogs.com/png.latex?dt"></li>
<li><img src="https://latex.codecogs.com/png.latex?x_%7Bnew%7D=x_%7Bold%7D+%5Cdot%7Bx%7D_%7Bnew%7D%5Ctimes"> <img src="https://latex.codecogs.com/png.latex?dt"></li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cdot%7B%5Ctheta%7D_%7Bnew%7D=%5Cdot%7B%5Ctheta%7D_%7Bold%7D+%5Cddot%7B%5Ctheta%7D%5Ctimes"> <img src="https://latex.codecogs.com/png.latex?dt"></li>
<li><img src="https://latex.codecogs.com/png.latex?%5Ctheta_%7Bnew%7D=%5Ctheta_%7Bold%7D+%5Cdot%7B%5Ctheta%7D_%7Bnew%7D%5Ctimes"> <img src="https://latex.codecogs.com/png.latex?dt"></li>
</ul></li>
<li>Repeat for the desired number of steps or until we reach the end of simulation (e.g.&nbsp;12 seconds).</li>
</ol>
</section>
<section id="putting-it-all-together" class="level1">
<h1>Putting it all together</h1>
<p>Now that we defined the system, we can write our lil simulation of the inverted pendulum on a cart:</p>
<div id="cell-3" class="cell" data-executetime="{&quot;end_time&quot;:&quot;2023-10-24T15:29:38.970201049Z&quot;,&quot;start_time&quot;:&quot;2023-10-24T15:29:38.955384542Z&quot;}" data-execution_count="1">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"></span>
<span id="cb1-3">G <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">9.81</span></span>
<span id="cb1-4"></span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> CartPendulum:</span>
<span id="cb1-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, dt, length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">200.</span>, pendulum_mass<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, cart_mass<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, friction_coefficient<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0008</span>):</span>
<span id="cb1-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dt</span>
<span id="cb1-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> length</span>
<span id="cb1-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pendulum_mass <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pendulum_mass</span>
<span id="cb1-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cart_mass <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cart_mass</span>
<span id="cb1-12">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.friction_coefficient <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> friction_coefficient</span>
<span id="cb1-13"></span>
<span id="cb1-14">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cart_pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span></span>
<span id="cb1-15">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cart_speed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span></span>
<span id="cb1-16">        </span>
<span id="cb1-17">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pendulum_angle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.pi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-1</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># angle</span></span>
<span id="cb1-18">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pendulum_speed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># angular speed</span></span>
<span id="cb1-19">        </span>
<span id="cb1-20">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.friction_force <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span></span>
<span id="cb1-21"></span>
<span id="cb1-22"></span>
<span id="cb1-23">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> step(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, force_on_cart):</span>
<span id="cb1-24">        pendulum_mass_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pendulum_mass <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.length</span>
<span id="cb1-25">        total_mass <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cart_mass <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pendulum_mass</span>
<span id="cb1-26">        pendulum_inertia <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pendulum_mass <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pendulum_mass <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb1-27">        </span>
<span id="cb1-28">        cosphi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.cos(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pendulum_angle)</span>
<span id="cb1-29">        sinphi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>np.sin(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pendulum_angle)</span>
<span id="cb1-30">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.friction_force <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.friction_coefficient <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cart_speed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.sign(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cart_speed)</span>
<span id="cb1-31"></span>
<span id="cb1-32">        cart_acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ((cosphi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> pendulum_mass_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pendulum_speed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> force_on_cart <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.friction_force) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> pendulum_inertia <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span></span>
<span id="cb1-33">                    (pendulum_mass_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>G <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> cosphi) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (pendulum_mass_length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>sinphi)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb1-34">                   (total_mass <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> pendulum_inertia <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> pendulum_mass_length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>sinphi<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>pendulum_mass_length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>sinphi)</span>
<span id="cb1-35"></span>
<span id="cb1-36">        angular_acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>cart_acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> pendulum_mass_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> sinphi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (pendulum_mass_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>G <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> cosphi)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> pendulum_inertia</span>
<span id="cb1-37"></span>
<span id="cb1-38">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cart_pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cart_speed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dt</span>
<span id="cb1-39">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cart_speed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> cart_acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dt</span>
<span id="cb1-40">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pendulum_angle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pendulum_speed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dt</span>
<span id="cb1-41">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pendulum_speed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> angular_acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dt</span></code></pre></div>
</details>
</div>
</section>
<section id="fin" class="level1">
<h1>Fin</h1>
<video width="100%" src="pendulum_on_cart.mp4" controls="">
</video>
</section>
<section id="citation" class="level1">
<h1>Citation</h1>
<p>Cited as:</p>
<pre><code>Englert, Brunó B. (Jul 2023). 2D Physics of The Inverted Pendulum on a Cart. https://englert.ai/posts/001_inverted_pendulum/englert_ai_1_cart_physics.html.</code></pre>
<p>Or</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode ruby code-with-copy"><code class="sourceCode ruby"><span id="cb3-1"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">@article</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">{</span>englert2023physicscartpole,</span>
<span id="cb3-2">  title   <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2D Physics of The Inverted Pendulum on a Cart"</span>,</span>
<span id="cb3-3">  author  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Englert, Brunó B."</span>,</span>
<span id="cb3-4">  journal <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"englert.ai"</span>,</span>
<span id="cb3-5">  year    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023"</span>,</span>
<span id="cb3-6">  month   <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Jul"</span>,</span>
<span id="cb3-7">  url     <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://englert.ai/posts/001_inverted_pendulum/englert_ai_1_cart_physics.html"</span></span>
<span id="cb3-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">}</span></span></code></pre></div>
<p>The code to reproduce the visualization:</p>
<div id="cell-7" class="cell" data-executetime="{&quot;end_time&quot;:&quot;2023-10-24T15:29:40.213372016Z&quot;,&quot;start_time&quot;:&quot;2023-10-24T15:29:40.016574369Z&quot;}" data-execution_count="2">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> math</span>
<span id="cb4-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> arcade</span>
<span id="cb4-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> arcade</span>
<span id="cb4-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb4-5"></span>
<span id="cb4-6"></span>
<span id="cb4-7">SCREEN_WIDTH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1200</span></span>
<span id="cb4-8">SCREEN_HEIGHT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">600</span></span>
<span id="cb4-9"></span>
<span id="cb4-10"></span>
<span id="cb4-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Simulation:</span>
<span id="cb4-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-13">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cart_pendulum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CartPendulum(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>)</span>
<span id="cb4-14">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.shift <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span></span>
<span id="cb4-15">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cart_pendulum.cart_pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.shift</span>
<span id="cb4-16">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.shift</span>
<span id="cb4-17">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.shift</span>
<span id="cb4-18">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.shift</span>
<span id="cb4-19"></span>
<span id="cb4-20">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.user_applied_force <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb4-21"></span>
<span id="cb4-22">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> step(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-23">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cart_pendulum.step(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.user_applied_force)</span>
<span id="cb4-24"></span>
<span id="cb4-25">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-26">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">""" Draw our rectangle """</span></span>
<span id="cb4-27">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cart_pendulum.cart_pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.shift</span>
<span id="cb4-28">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.shift</span>
<span id="cb4-29">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cart_pendulum.cart_pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cart_pendulum.length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> math.cos(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cart_pendulum.pendulum_angle) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.shift</span>
<span id="cb4-30">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cart_pendulum.length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> math.sin(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cart_pendulum.pendulum_angle) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.shift</span>
<span id="cb4-31"></span>
<span id="cb4-32">        overflow <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> SCREEN_WIDTH) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> SCREEN_WIDTH</span>
<span id="cb4-33">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> overflow</span>
<span id="cb4-34">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> overflow</span>
<span id="cb4-35"></span>
<span id="cb4-36">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Draw cart</span></span>
<span id="cb4-37">        arcade.draw_rectangle_outline(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x0, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y0, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, arcade.color.BLACK)</span>
<span id="cb4-38">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Draw pendulum</span></span>
<span id="cb4-39">        arcade.draw_line(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x0, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y0, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x1, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y1, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>arcade.color.RED, line_width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb4-40">        arcade.draw_circle_filled(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x0, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y0, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, arcade.color.BLACK)</span>
<span id="cb4-41">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Draw wheels</span></span>
<span id="cb4-42">        wheel_distance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span></span>
<span id="cb4-43">        arcade.draw_circle_filled(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> wheel_distance, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, arcade.color.BLACK)</span>
<span id="cb4-44">        arcade.draw_circle_filled(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> wheel_distance, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, arcade.color.BLACK)</span>
<span id="cb4-45">        arcade.draw_commands.draw_arc_filled(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> wheel_distance, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>],</span>
<span id="cb4-46">                                             start_angle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb4-47">                                             end_angle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, tilt_angle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">360</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.pi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>))</span>
<span id="cb4-48">        arcade.draw_commands.draw_arc_filled(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> wheel_distance, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>],</span>
<span id="cb4-49">                                             start_angle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb4-50">                                             end_angle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, tilt_angle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">360</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.pi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>))</span>
<span id="cb4-51">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Terrain</span></span>
<span id="cb4-52">        arcade.draw_line(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>, SCREEN_WIDTH, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>, arcade.color.BLACK, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb4-53"></span>
<span id="cb4-54"></span>
<span id="cb4-55">        <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> draw_force(center, force, y, color, thickness<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, multiplier<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>):</span>
<span id="cb4-56">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> force <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb4-57">                left <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> center</span>
<span id="cb4-58">                right <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.fmin(center <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> force <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> multiplier, SCREEN_WIDTH)</span>
<span id="cb4-59">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb4-60">                left <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.fmax(center <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> force <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> multiplier, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb4-61">                right <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> center</span>
<span id="cb4-62"></span>
<span id="cb4-63">            arcade.draw_lrtb_rectangle_filled(left, right, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> thickness, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> thickness, color)</span>
<span id="cb4-64"></span>
<span id="cb4-65">        draw_force(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x0, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cart_pendulum.friction_force, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y0, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>arcade.color.BLUE_GREEN)</span>
<span id="cb4-66">        draw_force(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x0, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.user_applied_force, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>arcade.color.YELLOW_ORANGE)</span>
<span id="cb4-67"></span>
<span id="cb4-68">        text_y0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb4-69">        text_y_diff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span></span>
<span id="cb4-70">        width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span></span>
<span id="cb4-71"></span>
<span id="cb4-72">        arcade.draw_text(</span>
<span id="cb4-73">            text<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{:0.2f}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">N Friction force"</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cart_pendulum.friction_force),</span>
<span id="cb4-74">            start_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>SCREEN_WIDTH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,</span>
<span id="cb4-75">            start_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>text_y0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> text_y_diff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb4-76">            color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>arcade.color.BLUE_GREEN,</span>
<span id="cb4-77">            font_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>,</span>
<span id="cb4-78">            align<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'right'</span>,</span>
<span id="cb4-79">            anchor_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'right'</span>,</span>
<span id="cb4-80">            width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>width)</span>
<span id="cb4-81">        arcade.draw_text(</span>
<span id="cb4-82">            text<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{:0.2f}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">N User applied force"</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.user_applied_force),</span>
<span id="cb4-83">            start_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>SCREEN_WIDTH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,</span>
<span id="cb4-84">            start_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>text_y0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> text_y_diff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb4-85">            color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>arcade.color.YELLOW_ORANGE,</span>
<span id="cb4-86">            font_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>,</span>
<span id="cb4-87">            align<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'right'</span>,</span>
<span id="cb4-88">            anchor_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'right'</span>,</span>
<span id="cb4-89">            width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>width)</span>
<span id="cb4-90">        arcade.draw_text(</span>
<span id="cb4-91">            text<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{:0.2f}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">° Angle"</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(((<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cart_pendulum.pendulum_angle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.pi) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">360</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">360</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">180</span>),</span>
<span id="cb4-92">            start_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>SCREEN_WIDTH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,</span>
<span id="cb4-93">            start_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>text_y0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> text_y_diff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,</span>
<span id="cb4-94">            color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>arcade.color.BLACK,</span>
<span id="cb4-95">            font_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>,</span>
<span id="cb4-96">            align<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'right'</span>,</span>
<span id="cb4-97">            anchor_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'right'</span>,</span>
<span id="cb4-98">            width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>width)</span>
<span id="cb4-99">        arcade.draw_text(</span>
<span id="cb4-100">            text<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{:0.2f}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">°/s Angular speed"</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cart_pendulum.pendulum_speed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.pi) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">360</span>),</span>
<span id="cb4-101">            start_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>SCREEN_WIDTH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,</span>
<span id="cb4-102">            start_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>text_y0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> text_y_diff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,</span>
<span id="cb4-103">            color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>arcade.color.BLACK,</span>
<span id="cb4-104">            font_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>,</span>
<span id="cb4-105">            align<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'right'</span>,</span>
<span id="cb4-106">            anchor_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'right'</span>,</span>
<span id="cb4-107">            width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>width)</span>
<span id="cb4-108"></span>
<span id="cb4-109"></span>
<span id="cb4-110"></span>
<span id="cb4-111"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Application(arcade.Window):</span>
<span id="cb4-112">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">""" Main application class. """</span></span>
<span id="cb4-113"></span>
<span id="cb4-114">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, width, height):</span>
<span id="cb4-115">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(width, height, title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pendulum On Cart"</span>)</span>
<span id="cb4-116">        arcade.set_background_color(arcade.color.WHITE)</span>
<span id="cb4-117">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.simulation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb4-118"></span>
<span id="cb4-119">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> setup(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-120">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">""" Set up the game and initialize the variables. """</span></span>
<span id="cb4-121">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.set_update_rate(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">160</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set fps</span></span>
<span id="cb4-122">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.simulation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Simulation()</span>
<span id="cb4-123"></span>
<span id="cb4-124">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, dt):</span>
<span id="cb4-125">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">""" Move everything """</span></span>
<span id="cb4-126">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(1/dt)</span></span>
<span id="cb4-127">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.simulation.step()</span>
<span id="cb4-128"></span>
<span id="cb4-129"></span>
<span id="cb4-130">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> on_draw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-131">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb4-132"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Render the screen.</span></span>
<span id="cb4-133"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb4-134">        arcade.start_render()</span>
<span id="cb4-135">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.simulation.draw()</span>
<span id="cb4-136"></span>
<span id="cb4-137">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> on_key_press(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, key, modifiers):</span>
<span id="cb4-138">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Called whenever a key is pressed. """</span></span>
<span id="cb4-139">        force <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.</span></span>
<span id="cb4-140">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> arcade.key.LEFT:</span>
<span id="cb4-141">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.simulation.user_applied_force <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>force</span>
<span id="cb4-142">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> arcade.key.RIGHT:</span>
<span id="cb4-143">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.simulation.user_applied_force <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> force</span>
<span id="cb4-144">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> arcade.key.SPACE:</span>
<span id="cb4-145">            arcade.window_commands.pause(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span>
<span id="cb4-146">            image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> arcade.draw_commands.get_image()</span>
<span id="cb4-147">            image.save(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'screenshot.png'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PNG'</span>)</span>
<span id="cb4-148"></span>
<span id="cb4-149">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> on_key_release(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, key, modifiers):</span>
<span id="cb4-150">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Called whenever a key is pressed. """</span></span>
<span id="cb4-151">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> arcade.key.LEFT:</span>
<span id="cb4-152">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.simulation.user_applied_force <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb4-153"></span>
<span id="cb4-154">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> arcade.key.RIGHT:</span>
<span id="cb4-155">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.simulation.user_applied_force <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb4-156"></span>
<span id="cb4-157"></span>
<span id="cb4-158">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> on_close(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-159">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().on_close()</span>
<span id="cb4-160"></span>
<span id="cb4-161"></span>
<span id="cb4-162"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__main__"</span>:</span>
<span id="cb4-163">    window <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Application(SCREEN_WIDTH, SCREEN_HEIGHT)</span>
<span id="cb4-164">    window.setup()</span>
<span id="cb4-165">    arcade.run()</span></code></pre></div>
</details>
</div>


</section>

 ]]></description>
  <category>sim</category>
  <guid>https://www.englert.ai/posts/001_inverted_pendulum/englert_ai_1_cart_physics.html</guid>
  <pubDate>Tue, 25 Jul 2023 22:00:00 GMT</pubDate>
</item>
</channel>
</rss>
